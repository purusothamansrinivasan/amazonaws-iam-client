/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UploadServerCertificateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class UploadServerCertificateRequest {
  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nullable
  private String path;

  public static final String SERIALIZED_NAME_SERVER_CERTIFICATE_NAME = "ServerCertificateName";
  @SerializedName(SERIALIZED_NAME_SERVER_CERTIFICATE_NAME)
  @javax.annotation.Nonnull
  private String serverCertificateName;

  public static final String SERIALIZED_NAME_CERTIFICATE_BODY = "CertificateBody";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_BODY)
  @javax.annotation.Nonnull
  private String certificateBody;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "PrivateKey";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  @javax.annotation.Nonnull
  private String privateKey;

  public static final String SERIALIZED_NAME_CERTIFICATE_CHAIN = "CertificateChain";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_CHAIN)
  @javax.annotation.Nullable
  private String certificateChain;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<Tag> tags;

  public UploadServerCertificateRequest() {
  }

  public UploadServerCertificateRequest path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * &lt;p&gt;The path for the server certificate. For more information about paths, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt;) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (&lt;code&gt;\\u0021&lt;/code&gt;) through the DEL character (&lt;code&gt;\\u007F&lt;/code&gt;), including most punctuation characters, digits, and upper and lowercased letters.&lt;/p&gt; &lt;note&gt; &lt;p&gt; If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the &lt;code&gt;path&lt;/code&gt; parameter. The path must begin with &lt;code&gt;/cloudfront&lt;/code&gt; and must include a trailing slash (for example, &lt;code&gt;/cloudfront/test/&lt;/code&gt;).&lt;/p&gt; &lt;/note&gt;
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public UploadServerCertificateRequest serverCertificateName(@javax.annotation.Nonnull String serverCertificateName) {
    this.serverCertificateName = serverCertificateName;
    return this;
  }

  /**
   * &lt;p&gt;The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.&lt;/p&gt; &lt;p&gt;This parameter allows (through its &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt;) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+&#x3D;,.@-&lt;/p&gt;
   * @return serverCertificateName
   */
  @javax.annotation.Nonnull
  public String getServerCertificateName() {
    return serverCertificateName;
  }

  public void setServerCertificateName(@javax.annotation.Nonnull String serverCertificateName) {
    this.serverCertificateName = serverCertificateName;
  }


  public UploadServerCertificateRequest certificateBody(@javax.annotation.Nonnull String certificateBody) {
    this.certificateBody = certificateBody;
    return this;
  }

  /**
   * &lt;p&gt;The contents of the public key certificate in PEM-encoded format.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; used to validate this parameter is a string of characters consisting of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Any printable ASCII character ranging from the space character (&lt;code&gt;\\u0020&lt;/code&gt;) through the end of the ASCII character range&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The printable characters in the Basic Latin and Latin-1 Supplement character set (through &lt;code&gt;\\u00FF&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The special characters tab (&lt;code&gt;\\u0009&lt;/code&gt;), line feed (&lt;code&gt;\\u000A&lt;/code&gt;), and carriage return (&lt;code&gt;\\u000D&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return certificateBody
   */
  @javax.annotation.Nonnull
  public String getCertificateBody() {
    return certificateBody;
  }

  public void setCertificateBody(@javax.annotation.Nonnull String certificateBody) {
    this.certificateBody = certificateBody;
  }


  public UploadServerCertificateRequest privateKey(@javax.annotation.Nonnull String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * &lt;p&gt;The contents of the private key in PEM-encoded format.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; used to validate this parameter is a string of characters consisting of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Any printable ASCII character ranging from the space character (&lt;code&gt;\\u0020&lt;/code&gt;) through the end of the ASCII character range&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The printable characters in the Basic Latin and Latin-1 Supplement character set (through &lt;code&gt;\\u00FF&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The special characters tab (&lt;code&gt;\\u0009&lt;/code&gt;), line feed (&lt;code&gt;\\u000A&lt;/code&gt;), and carriage return (&lt;code&gt;\\u000D&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return privateKey
   */
  @javax.annotation.Nonnull
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(@javax.annotation.Nonnull String privateKey) {
    this.privateKey = privateKey;
  }


  public UploadServerCertificateRequest certificateChain(@javax.annotation.Nullable String certificateChain) {
    this.certificateChain = certificateChain;
    return this;
  }

  /**
   * &lt;p&gt;The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; used to validate this parameter is a string of characters consisting of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Any printable ASCII character ranging from the space character (&lt;code&gt;\\u0020&lt;/code&gt;) through the end of the ASCII character range&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The printable characters in the Basic Latin and Latin-1 Supplement character set (through &lt;code&gt;\\u00FF&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The special characters tab (&lt;code&gt;\\u0009&lt;/code&gt;), line feed (&lt;code&gt;\\u000A&lt;/code&gt;), and carriage return (&lt;code&gt;\\u000D&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return certificateChain
   */
  @javax.annotation.Nullable
  public String getCertificateChain() {
    return certificateChain;
  }

  public void setCertificateChain(@javax.annotation.Nullable String certificateChain) {
    this.certificateChain = certificateChain;
  }


  public UploadServerCertificateRequest tags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public UploadServerCertificateRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of tags that you want to attach to the new IAM server certificate resource. Each tag consists of a key name and an associated value. For more information about tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\&quot;&gt;Tagging IAM resources&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.&lt;/p&gt; &lt;/note&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadServerCertificateRequest uploadServerCertificateRequest = (UploadServerCertificateRequest) o;
    return Objects.equals(this.path, uploadServerCertificateRequest.path) &&
        Objects.equals(this.serverCertificateName, uploadServerCertificateRequest.serverCertificateName) &&
        Objects.equals(this.certificateBody, uploadServerCertificateRequest.certificateBody) &&
        Objects.equals(this.privateKey, uploadServerCertificateRequest.privateKey) &&
        Objects.equals(this.certificateChain, uploadServerCertificateRequest.certificateChain) &&
        Objects.equals(this.tags, uploadServerCertificateRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, serverCertificateName, certificateBody, privateKey, certificateChain, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadServerCertificateRequest {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    serverCertificateName: ").append(toIndentedString(serverCertificateName)).append("\n");
    sb.append("    certificateBody: ").append(toIndentedString(certificateBody)).append("\n");
    sb.append("    privateKey: ").append("*").append("\n");
    sb.append("    certificateChain: ").append(toIndentedString(certificateChain)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Path", "ServerCertificateName", "CertificateBody", "PrivateKey", "CertificateChain", "Tags"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("ServerCertificateName", "CertificateBody", "PrivateKey"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UploadServerCertificateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadServerCertificateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadServerCertificateRequest is not found in the empty JSON string", UploadServerCertificateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadServerCertificateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadServerCertificateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadServerCertificateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if (!jsonObj.get("ServerCertificateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerCertificateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerCertificateName").toString()));
      }
      if (!jsonObj.get("CertificateBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificateBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificateBody").toString()));
      }
      if (!jsonObj.get("PrivateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrivateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrivateKey").toString()));
      }
      if ((jsonObj.get("CertificateChain") != null && !jsonObj.get("CertificateChain").isJsonNull()) && !jsonObj.get("CertificateChain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificateChain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificateChain").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadServerCertificateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadServerCertificateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadServerCertificateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadServerCertificateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadServerCertificateRequest>() {
           @Override
           public void write(JsonWriter out, UploadServerCertificateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadServerCertificateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UploadServerCertificateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadServerCertificateRequest
   * @throws IOException if the JSON string is invalid with respect to UploadServerCertificateRequest
   */
  public static UploadServerCertificateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadServerCertificateRequest.class);
  }

  /**
   * Convert an instance of UploadServerCertificateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

