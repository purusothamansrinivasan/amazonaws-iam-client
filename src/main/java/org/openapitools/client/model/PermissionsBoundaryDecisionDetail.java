/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the effect that a permissions boundary has on a policy simulation when the boundary is applied to an IAM entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class PermissionsBoundaryDecisionDetail {
  public static final String SERIALIZED_NAME_ALLOWED_BY_PERMISSIONS_BOUNDARY = "AllowedByPermissionsBoundary";
  @SerializedName(SERIALIZED_NAME_ALLOWED_BY_PERMISSIONS_BOUNDARY)
  @javax.annotation.Nullable
  private Boolean allowedByPermissionsBoundary;

  public PermissionsBoundaryDecisionDetail() {
  }

  public PermissionsBoundaryDecisionDetail allowedByPermissionsBoundary(@javax.annotation.Nullable Boolean allowedByPermissionsBoundary) {
    this.allowedByPermissionsBoundary = allowedByPermissionsBoundary;
    return this;
  }

  /**
   * Specifies whether an action is allowed by a permissions boundary that is applied to an IAM entity (user or role). A value of &lt;code&gt;true&lt;/code&gt; means that the permissions boundary does not deny the action. This means that the policy includes an &lt;code&gt;Allow&lt;/code&gt; statement that matches the request. In this case, if an identity-based policy also allows the action, the request is allowed. A value of &lt;code&gt;false&lt;/code&gt; means that either the requested action is not allowed (implicitly denied) or that the action is explicitly denied by the permissions boundary. In both of these cases, the action is not allowed, regardless of the identity-based policy.
   * @return allowedByPermissionsBoundary
   */
  @javax.annotation.Nullable
  public Boolean getAllowedByPermissionsBoundary() {
    return allowedByPermissionsBoundary;
  }

  public void setAllowedByPermissionsBoundary(@javax.annotation.Nullable Boolean allowedByPermissionsBoundary) {
    this.allowedByPermissionsBoundary = allowedByPermissionsBoundary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PermissionsBoundaryDecisionDetail permissionsBoundaryDecisionDetail = (PermissionsBoundaryDecisionDetail) o;
    return Objects.equals(this.allowedByPermissionsBoundary, permissionsBoundaryDecisionDetail.allowedByPermissionsBoundary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedByPermissionsBoundary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PermissionsBoundaryDecisionDetail {\n");
    sb.append("    allowedByPermissionsBoundary: ").append(toIndentedString(allowedByPermissionsBoundary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("AllowedByPermissionsBoundary"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PermissionsBoundaryDecisionDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PermissionsBoundaryDecisionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PermissionsBoundaryDecisionDetail is not found in the empty JSON string", PermissionsBoundaryDecisionDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PermissionsBoundaryDecisionDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PermissionsBoundaryDecisionDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PermissionsBoundaryDecisionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PermissionsBoundaryDecisionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PermissionsBoundaryDecisionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PermissionsBoundaryDecisionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<PermissionsBoundaryDecisionDetail>() {
           @Override
           public void write(JsonWriter out, PermissionsBoundaryDecisionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PermissionsBoundaryDecisionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PermissionsBoundaryDecisionDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PermissionsBoundaryDecisionDetail
   * @throws IOException if the JSON string is invalid with respect to PermissionsBoundaryDecisionDetail
   */
  public static PermissionsBoundaryDecisionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PermissionsBoundaryDecisionDetail.class);
  }

  /**
   * Convert an instance of PermissionsBoundaryDecisionDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

