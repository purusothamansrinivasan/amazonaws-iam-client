/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AssignmentStatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListVirtualMFADevicesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ListVirtualMFADevicesRequest {
  public static final String SERIALIZED_NAME_ASSIGNMENT_STATUS = "AssignmentStatus";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_STATUS)
  @javax.annotation.Nullable
  private AssignmentStatusType assignmentStatus;

  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  @javax.annotation.Nullable
  private String marker;

  public static final String SERIALIZED_NAME_MAX_ITEMS = "MaxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  @javax.annotation.Nullable
  private Integer maxItems;

  public ListVirtualMFADevicesRequest() {
  }

  public ListVirtualMFADevicesRequest assignmentStatus(@javax.annotation.Nullable AssignmentStatusType assignmentStatus) {
    this.assignmentStatus = assignmentStatus;
    return this;
  }

  /**
   *  The status (&lt;code&gt;Unassigned&lt;/code&gt; or &lt;code&gt;Assigned&lt;/code&gt;) of the devices to list. If you do not specify an &lt;code&gt;AssignmentStatus&lt;/code&gt;, the operation defaults to &lt;code&gt;Any&lt;/code&gt;, which lists both assigned and unassigned virtual MFA devices.,
   * @return assignmentStatus
   */
  @javax.annotation.Nullable
  public AssignmentStatusType getAssignmentStatus() {
    return assignmentStatus;
  }

  public void setAssignmentStatus(@javax.annotation.Nullable AssignmentStatusType assignmentStatus) {
    this.assignmentStatus = assignmentStatus;
  }


  public ListVirtualMFADevicesRequest marker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the &lt;code&gt;Marker&lt;/code&gt; element in the response that you received to indicate where the next call should start.
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
  }


  public ListVirtualMFADevicesRequest maxItems(@javax.annotation.Nullable Integer maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * &lt;p&gt;Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the &lt;code&gt;IsTruncated&lt;/code&gt; response element is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the &lt;code&gt;IsTruncated&lt;/code&gt; response element returns &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;Marker&lt;/code&gt; contains a value to include in the subsequent call that tells the service where to continue from.&lt;/p&gt;
   * minimum: 1
   * maximum: 1000
   * @return maxItems
   */
  @javax.annotation.Nullable
  public Integer getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(@javax.annotation.Nullable Integer maxItems) {
    this.maxItems = maxItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListVirtualMFADevicesRequest listVirtualMFADevicesRequest = (ListVirtualMFADevicesRequest) o;
    return Objects.equals(this.assignmentStatus, listVirtualMFADevicesRequest.assignmentStatus) &&
        Objects.equals(this.marker, listVirtualMFADevicesRequest.marker) &&
        Objects.equals(this.maxItems, listVirtualMFADevicesRequest.maxItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignmentStatus, marker, maxItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListVirtualMFADevicesRequest {\n");
    sb.append("    assignmentStatus: ").append(toIndentedString(assignmentStatus)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("AssignmentStatus", "Marker", "MaxItems"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListVirtualMFADevicesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListVirtualMFADevicesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListVirtualMFADevicesRequest is not found in the empty JSON string", ListVirtualMFADevicesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListVirtualMFADevicesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListVirtualMFADevicesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AssignmentStatus`
      if (jsonObj.get("AssignmentStatus") != null && !jsonObj.get("AssignmentStatus").isJsonNull()) {
        AssignmentStatusType.validateJsonElement(jsonObj.get("AssignmentStatus"));
      }
      if ((jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) && !jsonObj.get("Marker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Marker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Marker").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListVirtualMFADevicesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListVirtualMFADevicesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListVirtualMFADevicesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListVirtualMFADevicesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListVirtualMFADevicesRequest>() {
           @Override
           public void write(JsonWriter out, ListVirtualMFADevicesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListVirtualMFADevicesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListVirtualMFADevicesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListVirtualMFADevicesRequest
   * @throws IOException if the JSON string is invalid with respect to ListVirtualMFADevicesRequest
   */
  public static ListVirtualMFADevicesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListVirtualMFADevicesRequest.class);
  }

  /**
   * Convert an instance of ListVirtualMFADevicesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

