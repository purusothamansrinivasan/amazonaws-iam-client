/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateOpenIDConnectProviderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class CreateOpenIDConnectProviderRequest {
  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private String url;

  public static final String SERIALIZED_NAME_CLIENT_I_D_LIST = "ClientIDList";
  @SerializedName(SERIALIZED_NAME_CLIENT_I_D_LIST)
  @javax.annotation.Nullable
  private List<String> clientIDList;

  public static final String SERIALIZED_NAME_THUMBPRINT_LIST = "ThumbprintList";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT_LIST)
  @javax.annotation.Nonnull
  private List<String> thumbprintList;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<Tag> tags;

  public CreateOpenIDConnectProviderRequest() {
  }

  public CreateOpenIDConnectProviderRequest url(@javax.annotation.Nonnull String url) {
    this.url = url;
    return this;
  }

  /**
   * &lt;p&gt;The URL of the identity provider. The URL must begin with &lt;code&gt;https://&lt;/code&gt; and should correspond to the &lt;code&gt;iss&lt;/code&gt; claim in the provider&#39;s OpenID Connect ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like &lt;code&gt;https://server.example.org&lt;/code&gt; or &lt;code&gt;https://example.com&lt;/code&gt;. The URL should not contain a port number. &lt;/p&gt; &lt;p&gt;You cannot register the same provider multiple times in a single Amazon Web Services account. If you try to submit a URL that has already been used for an OpenID Connect provider in the Amazon Web Services account, you will get an error.&lt;/p&gt;
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }


  public CreateOpenIDConnectProviderRequest clientIDList(@javax.annotation.Nullable List<String> clientIDList) {
    this.clientIDList = clientIDList;
    return this;
  }

  public CreateOpenIDConnectProviderRequest addClientIDListItem(String clientIDListItem) {
    if (this.clientIDList == null) {
      this.clientIDList = new ArrayList<>();
    }
    this.clientIDList.add(clientIDListItem);
    return this;
  }

  /**
   * &lt;p&gt;Provides a list of client IDs, also known as audiences. When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. This is the value that&#39;s sent as the &lt;code&gt;client_id&lt;/code&gt; parameter on OAuth requests.&lt;/p&gt; &lt;p&gt;You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.&lt;/p&gt; &lt;p&gt;There is no defined format for a client ID. The &lt;code&gt;CreateOpenIDConnectProviderRequest&lt;/code&gt; operation accepts client IDs up to 255 characters long.&lt;/p&gt;
   * @return clientIDList
   */
  @javax.annotation.Nullable
  public List<String> getClientIDList() {
    return clientIDList;
  }

  public void setClientIDList(@javax.annotation.Nullable List<String> clientIDList) {
    this.clientIDList = clientIDList;
  }


  public CreateOpenIDConnectProviderRequest thumbprintList(@javax.annotation.Nonnull List<String> thumbprintList) {
    this.thumbprintList = thumbprintList;
    return this;
  }

  public CreateOpenIDConnectProviderRequest addThumbprintListItem(String thumbprintListItem) {
    if (this.thumbprintList == null) {
      this.thumbprintList = new ArrayList<>();
    }
    this.thumbprintList.add(thumbprintListItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider&#39;s server certificates. Typically this list includes only one entry. However, IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain multiple thumbprints if the identity provider is rotating certificates.&lt;/p&gt; &lt;p&gt;The server certificate thumbprint is the hex-encoded SHA-1 hash value of the X.509 certificate used by the domain where the OpenID Connect provider makes its keys available. It is always a 40-character string.&lt;/p&gt; &lt;p&gt;You must provide at least one thumbprint when creating an IAM OIDC provider. For example, assume that the OIDC provider is &lt;code&gt;server.example.com&lt;/code&gt; and the provider stores its keys at https://keys.server.example.com/openid-connect. In that case, the thumbprint string would be the hex-encoded SHA-1 hash value of the certificate used by &lt;code&gt;https://keys.server.example.com.&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information about obtaining the OIDC provider thumbprint, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/identity-providers-oidc-obtain-thumbprint.html\&quot;&gt;Obtaining the thumbprint for an OpenID Connect provider&lt;/a&gt; in the &lt;i&gt;IAM user Guide&lt;/i&gt;.&lt;/p&gt;
   * @return thumbprintList
   */
  @javax.annotation.Nonnull
  public List<String> getThumbprintList() {
    return thumbprintList;
  }

  public void setThumbprintList(@javax.annotation.Nonnull List<String> thumbprintList) {
    this.thumbprintList = thumbprintList;
  }


  public CreateOpenIDConnectProviderRequest tags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateOpenIDConnectProviderRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of tags that you want to attach to the new IAM OpenID Connect (OIDC) provider. Each tag consists of a key name and an associated value. For more information about tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\&quot;&gt;Tagging IAM resources&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.&lt;/p&gt; &lt;/note&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOpenIDConnectProviderRequest createOpenIDConnectProviderRequest = (CreateOpenIDConnectProviderRequest) o;
    return Objects.equals(this.url, createOpenIDConnectProviderRequest.url) &&
        Objects.equals(this.clientIDList, createOpenIDConnectProviderRequest.clientIDList) &&
        Objects.equals(this.thumbprintList, createOpenIDConnectProviderRequest.thumbprintList) &&
        Objects.equals(this.tags, createOpenIDConnectProviderRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, clientIDList, thumbprintList, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOpenIDConnectProviderRequest {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    clientIDList: ").append(toIndentedString(clientIDList)).append("\n");
    sb.append("    thumbprintList: ").append(toIndentedString(thumbprintList)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Url", "ClientIDList", "ThumbprintList", "Tags"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("Url", "ThumbprintList"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateOpenIDConnectProviderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateOpenIDConnectProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateOpenIDConnectProviderRequest is not found in the empty JSON string", CreateOpenIDConnectProviderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateOpenIDConnectProviderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateOpenIDConnectProviderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateOpenIDConnectProviderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ClientIDList") != null && !jsonObj.get("ClientIDList").isJsonNull() && !jsonObj.get("ClientIDList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientIDList` to be an array in the JSON string but got `%s`", jsonObj.get("ClientIDList").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ThumbprintList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ThumbprintList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThumbprintList` to be an array in the JSON string but got `%s`", jsonObj.get("ThumbprintList").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateOpenIDConnectProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateOpenIDConnectProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateOpenIDConnectProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateOpenIDConnectProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateOpenIDConnectProviderRequest>() {
           @Override
           public void write(JsonWriter out, CreateOpenIDConnectProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateOpenIDConnectProviderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateOpenIDConnectProviderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateOpenIDConnectProviderRequest
   * @throws IOException if the JSON string is invalid with respect to CreateOpenIDConnectProviderRequest
   */
  public static CreateOpenIDConnectProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateOpenIDConnectProviderRequest.class);
  }

  /**
   * Convert an instance of CreateOpenIDConnectProviderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

