/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSAMLProviderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class UpdateSAMLProviderRequest {
  public static final String SERIALIZED_NAME_SA_M_L_METADATA_DOCUMENT = "SAMLMetadataDocument";
  @SerializedName(SERIALIZED_NAME_SA_M_L_METADATA_DOCUMENT)
  @javax.annotation.Nonnull
  private String saMLMetadataDocument;

  public static final String SERIALIZED_NAME_SA_M_L_PROVIDER_ARN = "SAMLProviderArn";
  @SerializedName(SERIALIZED_NAME_SA_M_L_PROVIDER_ARN)
  @javax.annotation.Nonnull
  private String saMLProviderArn;

  public UpdateSAMLProviderRequest() {
  }

  public UpdateSAMLProviderRequest saMLMetadataDocument(@javax.annotation.Nonnull String saMLMetadataDocument) {
    this.saMLMetadataDocument = saMLMetadataDocument;
    return this;
  }

  /**
   * An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer&#39;s name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization&#39;s IdP.
   * @return saMLMetadataDocument
   */
  @javax.annotation.Nonnull
  public String getSaMLMetadataDocument() {
    return saMLMetadataDocument;
  }

  public void setSaMLMetadataDocument(@javax.annotation.Nonnull String saMLMetadataDocument) {
    this.saMLMetadataDocument = saMLMetadataDocument;
  }


  public UpdateSAMLProviderRequest saMLProviderArn(@javax.annotation.Nonnull String saMLProviderArn) {
    this.saMLProviderArn = saMLProviderArn;
    return this;
  }

  /**
   * &lt;p&gt;The Amazon Resource Name (ARN) of the SAML provider to update.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt;
   * @return saMLProviderArn
   */
  @javax.annotation.Nonnull
  public String getSaMLProviderArn() {
    return saMLProviderArn;
  }

  public void setSaMLProviderArn(@javax.annotation.Nonnull String saMLProviderArn) {
    this.saMLProviderArn = saMLProviderArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSAMLProviderRequest updateSAMLProviderRequest = (UpdateSAMLProviderRequest) o;
    return Objects.equals(this.saMLMetadataDocument, updateSAMLProviderRequest.saMLMetadataDocument) &&
        Objects.equals(this.saMLProviderArn, updateSAMLProviderRequest.saMLProviderArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(saMLMetadataDocument, saMLProviderArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSAMLProviderRequest {\n");
    sb.append("    saMLMetadataDocument: ").append(toIndentedString(saMLMetadataDocument)).append("\n");
    sb.append("    saMLProviderArn: ").append(toIndentedString(saMLProviderArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("SAMLMetadataDocument", "SAMLProviderArn"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("SAMLMetadataDocument", "SAMLProviderArn"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSAMLProviderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSAMLProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSAMLProviderRequest is not found in the empty JSON string", UpdateSAMLProviderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSAMLProviderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSAMLProviderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSAMLProviderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("SAMLMetadataDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SAMLMetadataDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SAMLMetadataDocument").toString()));
      }
      if (!jsonObj.get("SAMLProviderArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SAMLProviderArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SAMLProviderArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSAMLProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSAMLProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSAMLProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSAMLProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSAMLProviderRequest>() {
           @Override
           public void write(JsonWriter out, UpdateSAMLProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSAMLProviderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSAMLProviderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSAMLProviderRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateSAMLProviderRequest
   */
  public static UpdateSAMLProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSAMLProviderRequest.class);
  }

  /**
   * Convert an instance of UpdateSAMLProviderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

