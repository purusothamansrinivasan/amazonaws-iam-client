/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VirtualMFADevice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the response to a successful &lt;a&gt;CreateVirtualMFADevice&lt;/a&gt; request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class CreateVirtualMFADeviceResponse {
  public static final String SERIALIZED_NAME_VIRTUAL_M_F_A_DEVICE = "VirtualMFADevice";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_M_F_A_DEVICE)
  @javax.annotation.Nonnull
  private VirtualMFADevice virtualMFADevice;

  public CreateVirtualMFADeviceResponse() {
  }

  public CreateVirtualMFADeviceResponse virtualMFADevice(@javax.annotation.Nonnull VirtualMFADevice virtualMFADevice) {
    this.virtualMFADevice = virtualMFADevice;
    return this;
  }

  /**
   * A structure containing details about the new virtual MFA device.
   * @return virtualMFADevice
   */
  @javax.annotation.Nonnull
  public VirtualMFADevice getVirtualMFADevice() {
    return virtualMFADevice;
  }

  public void setVirtualMFADevice(@javax.annotation.Nonnull VirtualMFADevice virtualMFADevice) {
    this.virtualMFADevice = virtualMFADevice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateVirtualMFADeviceResponse createVirtualMFADeviceResponse = (CreateVirtualMFADeviceResponse) o;
    return Objects.equals(this.virtualMFADevice, createVirtualMFADeviceResponse.virtualMFADevice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(virtualMFADevice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateVirtualMFADeviceResponse {\n");
    sb.append("    virtualMFADevice: ").append(toIndentedString(virtualMFADevice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("VirtualMFADevice"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("VirtualMFADevice"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateVirtualMFADeviceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateVirtualMFADeviceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateVirtualMFADeviceResponse is not found in the empty JSON string", CreateVirtualMFADeviceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateVirtualMFADeviceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateVirtualMFADeviceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateVirtualMFADeviceResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `VirtualMFADevice`
      VirtualMFADevice.validateJsonElement(jsonObj.get("VirtualMFADevice"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateVirtualMFADeviceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateVirtualMFADeviceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateVirtualMFADeviceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateVirtualMFADeviceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateVirtualMFADeviceResponse>() {
           @Override
           public void write(JsonWriter out, CreateVirtualMFADeviceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateVirtualMFADeviceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateVirtualMFADeviceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateVirtualMFADeviceResponse
   * @throws IOException if the JSON string is invalid with respect to CreateVirtualMFADeviceResponse
   */
  public static CreateVirtualMFADeviceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateVirtualMFADeviceResponse.class);
  }

  /**
   * Convert an instance of CreateVirtualMFADeviceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

