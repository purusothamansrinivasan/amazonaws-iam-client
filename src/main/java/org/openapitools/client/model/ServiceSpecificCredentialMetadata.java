/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains additional details about a service-specific credential.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ServiceSpecificCredentialMetadata {
  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  @javax.annotation.Nonnull
  private String userName;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusType status;

  public static final String SERIALIZED_NAME_SERVICE_USER_NAME = "ServiceUserName";
  @SerializedName(SERIALIZED_NAME_SERVICE_USER_NAME)
  @javax.annotation.Nonnull
  private String serviceUserName;

  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_SERVICE_SPECIFIC_CREDENTIAL_ID = "ServiceSpecificCredentialId";
  @SerializedName(SERIALIZED_NAME_SERVICE_SPECIFIC_CREDENTIAL_ID)
  @javax.annotation.Nonnull
  private String serviceSpecificCredentialId;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  @javax.annotation.Nonnull
  private String serviceName;

  public ServiceSpecificCredentialMetadata() {
  }

  public ServiceSpecificCredentialMetadata userName(@javax.annotation.Nonnull String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * The name of the IAM user associated with the service-specific credential.
   * @return userName
   */
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }

  public void setUserName(@javax.annotation.Nonnull String userName) {
    this.userName = userName;
  }


  public ServiceSpecificCredentialMetadata status(@javax.annotation.Nonnull StatusType status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the service-specific credential. &lt;code&gt;Active&lt;/code&gt; means that the key is valid for API calls, while &lt;code&gt;Inactive&lt;/code&gt; means it is not.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusType getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusType status) {
    this.status = status;
  }


  public ServiceSpecificCredentialMetadata serviceUserName(@javax.annotation.Nonnull String serviceUserName) {
    this.serviceUserName = serviceUserName;
    return this;
  }

  /**
   * The generated user name for the service-specific credential.
   * @return serviceUserName
   */
  @javax.annotation.Nonnull
  public String getServiceUserName() {
    return serviceUserName;
  }

  public void setServiceUserName(@javax.annotation.Nonnull String serviceUserName) {
    this.serviceUserName = serviceUserName;
  }


  public ServiceSpecificCredentialMetadata createDate(@javax.annotation.Nonnull OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * The date and time, in &lt;a href&#x3D;\&quot;http://www.iso.org/iso/iso8601\&quot;&gt;ISO 8601 date-time format&lt;/a&gt;, when the service-specific credential were created.
   * @return createDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(@javax.annotation.Nonnull OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public ServiceSpecificCredentialMetadata serviceSpecificCredentialId(@javax.annotation.Nonnull String serviceSpecificCredentialId) {
    this.serviceSpecificCredentialId = serviceSpecificCredentialId;
    return this;
  }

  /**
   * The unique identifier for the service-specific credential.
   * @return serviceSpecificCredentialId
   */
  @javax.annotation.Nonnull
  public String getServiceSpecificCredentialId() {
    return serviceSpecificCredentialId;
  }

  public void setServiceSpecificCredentialId(@javax.annotation.Nonnull String serviceSpecificCredentialId) {
    this.serviceSpecificCredentialId = serviceSpecificCredentialId;
  }


  public ServiceSpecificCredentialMetadata serviceName(@javax.annotation.Nonnull String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * The name of the service associated with the service-specific credential.
   * @return serviceName
   */
  @javax.annotation.Nonnull
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(@javax.annotation.Nonnull String serviceName) {
    this.serviceName = serviceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceSpecificCredentialMetadata serviceSpecificCredentialMetadata = (ServiceSpecificCredentialMetadata) o;
    return Objects.equals(this.userName, serviceSpecificCredentialMetadata.userName) &&
        Objects.equals(this.status, serviceSpecificCredentialMetadata.status) &&
        Objects.equals(this.serviceUserName, serviceSpecificCredentialMetadata.serviceUserName) &&
        Objects.equals(this.createDate, serviceSpecificCredentialMetadata.createDate) &&
        Objects.equals(this.serviceSpecificCredentialId, serviceSpecificCredentialMetadata.serviceSpecificCredentialId) &&
        Objects.equals(this.serviceName, serviceSpecificCredentialMetadata.serviceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userName, status, serviceUserName, createDate, serviceSpecificCredentialId, serviceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceSpecificCredentialMetadata {\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    serviceUserName: ").append(toIndentedString(serviceUserName)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    serviceSpecificCredentialId: ").append(toIndentedString(serviceSpecificCredentialId)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("UserName", "Status", "ServiceUserName", "CreateDate", "ServiceSpecificCredentialId", "ServiceName"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("UserName", "Status", "ServiceUserName", "CreateDate", "ServiceSpecificCredentialId", "ServiceName"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceSpecificCredentialMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceSpecificCredentialMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceSpecificCredentialMetadata is not found in the empty JSON string", ServiceSpecificCredentialMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceSpecificCredentialMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceSpecificCredentialMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceSpecificCredentialMetadata.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("UserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserName").toString()));
      }
      // validate the required field `Status`
      StatusType.validateJsonElement(jsonObj.get("Status"));
      if (!jsonObj.get("ServiceUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceUserName").toString()));
      }
      if (!jsonObj.get("ServiceSpecificCredentialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceSpecificCredentialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceSpecificCredentialId").toString()));
      }
      if (!jsonObj.get("ServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceSpecificCredentialMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceSpecificCredentialMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceSpecificCredentialMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceSpecificCredentialMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceSpecificCredentialMetadata>() {
           @Override
           public void write(JsonWriter out, ServiceSpecificCredentialMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceSpecificCredentialMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceSpecificCredentialMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceSpecificCredentialMetadata
   * @throws IOException if the JSON string is invalid with respect to ServiceSpecificCredentialMetadata
   */
  public static ServiceSpecificCredentialMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceSpecificCredentialMetadata.class);
  }

  /**
   * Convert an instance of ServiceSpecificCredentialMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

