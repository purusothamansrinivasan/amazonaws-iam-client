/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the response to a successful &lt;a&gt;GetOpenIDConnectProvider&lt;/a&gt; request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GetOpenIDConnectProviderResponse {
  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public static final String SERIALIZED_NAME_CLIENT_I_D_LIST = "ClientIDList";
  @SerializedName(SERIALIZED_NAME_CLIENT_I_D_LIST)
  @javax.annotation.Nullable
  private List<String> clientIDList;

  public static final String SERIALIZED_NAME_THUMBPRINT_LIST = "ThumbprintList";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT_LIST)
  @javax.annotation.Nullable
  private List<String> thumbprintList;

  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<Tag> tags;

  public GetOpenIDConnectProviderResponse() {
  }

  public GetOpenIDConnectProviderResponse url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL that the IAM OIDC provider resource object is associated with. For more information, see &lt;a&gt;CreateOpenIDConnectProvider&lt;/a&gt;.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }


  public GetOpenIDConnectProviderResponse clientIDList(@javax.annotation.Nullable List<String> clientIDList) {
    this.clientIDList = clientIDList;
    return this;
  }

  public GetOpenIDConnectProviderResponse addClientIDListItem(String clientIDListItem) {
    if (this.clientIDList == null) {
      this.clientIDList = new ArrayList<>();
    }
    this.clientIDList.add(clientIDListItem);
    return this;
  }

  /**
   * A list of client IDs (also known as audiences) that are associated with the specified IAM OIDC provider resource object. For more information, see &lt;a&gt;CreateOpenIDConnectProvider&lt;/a&gt;.
   * @return clientIDList
   */
  @javax.annotation.Nullable
  public List<String> getClientIDList() {
    return clientIDList;
  }

  public void setClientIDList(@javax.annotation.Nullable List<String> clientIDList) {
    this.clientIDList = clientIDList;
  }


  public GetOpenIDConnectProviderResponse thumbprintList(@javax.annotation.Nullable List<String> thumbprintList) {
    this.thumbprintList = thumbprintList;
    return this;
  }

  public GetOpenIDConnectProviderResponse addThumbprintListItem(String thumbprintListItem) {
    if (this.thumbprintList == null) {
      this.thumbprintList = new ArrayList<>();
    }
    this.thumbprintList.add(thumbprintListItem);
    return this;
  }

  /**
   * A list of certificate thumbprints that are associated with the specified IAM OIDC provider resource object. For more information, see &lt;a&gt;CreateOpenIDConnectProvider&lt;/a&gt;. 
   * @return thumbprintList
   */
  @javax.annotation.Nullable
  public List<String> getThumbprintList() {
    return thumbprintList;
  }

  public void setThumbprintList(@javax.annotation.Nullable List<String> thumbprintList) {
    this.thumbprintList = thumbprintList;
  }


  public GetOpenIDConnectProviderResponse createDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * The date and time when the IAM OIDC provider resource object was created in the Amazon Web Services account.
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public GetOpenIDConnectProviderResponse tags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public GetOpenIDConnectProviderResponse addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags that are attached to the specified IAM OIDC provider. The returned list of tags is sorted by tag key. For more information about tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\&quot;&gt;Tagging IAM resources&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOpenIDConnectProviderResponse getOpenIDConnectProviderResponse = (GetOpenIDConnectProviderResponse) o;
    return Objects.equals(this.url, getOpenIDConnectProviderResponse.url) &&
        Objects.equals(this.clientIDList, getOpenIDConnectProviderResponse.clientIDList) &&
        Objects.equals(this.thumbprintList, getOpenIDConnectProviderResponse.thumbprintList) &&
        Objects.equals(this.createDate, getOpenIDConnectProviderResponse.createDate) &&
        Objects.equals(this.tags, getOpenIDConnectProviderResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, clientIDList, thumbprintList, createDate, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOpenIDConnectProviderResponse {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    clientIDList: ").append(toIndentedString(clientIDList)).append("\n");
    sb.append("    thumbprintList: ").append(toIndentedString(thumbprintList)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Url", "ClientIDList", "ThumbprintList", "CreateDate", "Tags"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOpenIDConnectProviderResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOpenIDConnectProviderResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOpenIDConnectProviderResponse is not found in the empty JSON string", GetOpenIDConnectProviderResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOpenIDConnectProviderResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOpenIDConnectProviderResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull()) && !jsonObj.get("Url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ClientIDList") != null && !jsonObj.get("ClientIDList").isJsonNull() && !jsonObj.get("ClientIDList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientIDList` to be an array in the JSON string but got `%s`", jsonObj.get("ClientIDList").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ThumbprintList") != null && !jsonObj.get("ThumbprintList").isJsonNull() && !jsonObj.get("ThumbprintList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThumbprintList` to be an array in the JSON string but got `%s`", jsonObj.get("ThumbprintList").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOpenIDConnectProviderResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOpenIDConnectProviderResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOpenIDConnectProviderResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOpenIDConnectProviderResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOpenIDConnectProviderResponse>() {
           @Override
           public void write(JsonWriter out, GetOpenIDConnectProviderResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOpenIDConnectProviderResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOpenIDConnectProviderResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOpenIDConnectProviderResponse
   * @throws IOException if the JSON string is invalid with respect to GetOpenIDConnectProviderResponse
   */
  public static GetOpenIDConnectProviderResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOpenIDConnectProviderResponse.class);
  }

  /**
   * Convert an instance of GetOpenIDConnectProviderResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

