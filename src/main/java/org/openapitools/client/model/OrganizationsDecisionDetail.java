/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the effect that Organizations has on a policy simulation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class OrganizationsDecisionDetail {
  public static final String SERIALIZED_NAME_ALLOWED_BY_ORGANIZATIONS = "AllowedByOrganizations";
  @SerializedName(SERIALIZED_NAME_ALLOWED_BY_ORGANIZATIONS)
  @javax.annotation.Nullable
  private Boolean allowedByOrganizations;

  public OrganizationsDecisionDetail() {
  }

  public OrganizationsDecisionDetail allowedByOrganizations(@javax.annotation.Nullable Boolean allowedByOrganizations) {
    this.allowedByOrganizations = allowedByOrganizations;
    return this;
  }

  /**
   * Specifies whether the simulated operation is allowed by the Organizations service control policies that impact the simulated user&#39;s account.
   * @return allowedByOrganizations
   */
  @javax.annotation.Nullable
  public Boolean getAllowedByOrganizations() {
    return allowedByOrganizations;
  }

  public void setAllowedByOrganizations(@javax.annotation.Nullable Boolean allowedByOrganizations) {
    this.allowedByOrganizations = allowedByOrganizations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationsDecisionDetail organizationsDecisionDetail = (OrganizationsDecisionDetail) o;
    return Objects.equals(this.allowedByOrganizations, organizationsDecisionDetail.allowedByOrganizations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedByOrganizations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationsDecisionDetail {\n");
    sb.append("    allowedByOrganizations: ").append(toIndentedString(allowedByOrganizations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("AllowedByOrganizations"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationsDecisionDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganizationsDecisionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationsDecisionDetail is not found in the empty JSON string", OrganizationsDecisionDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationsDecisionDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationsDecisionDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationsDecisionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationsDecisionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationsDecisionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationsDecisionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationsDecisionDetail>() {
           @Override
           public void write(JsonWriter out, OrganizationsDecisionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationsDecisionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationsDecisionDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationsDecisionDetail
   * @throws IOException if the JSON string is invalid with respect to OrganizationsDecisionDetail
   */
  public static OrganizationsDecisionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationsDecisionDetail.class);
  }

  /**
   * Convert an instance of OrganizationsDecisionDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

