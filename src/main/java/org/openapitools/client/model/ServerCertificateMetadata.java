/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about a server certificate without its certificate body, certificate chain, and private key.&lt;/p&gt; &lt;p&gt; This data type is used as a response element in the &lt;a&gt;UploadServerCertificate&lt;/a&gt; and &lt;a&gt;ListServerCertificates&lt;/a&gt; operations. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ServerCertificateMetadata {
  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nonnull
  private String path;

  public static final String SERIALIZED_NAME_SERVER_CERTIFICATE_NAME = "ServerCertificateName";
  @SerializedName(SERIALIZED_NAME_SERVER_CERTIFICATE_NAME)
  @javax.annotation.Nonnull
  private String serverCertificateName;

  public static final String SERIALIZED_NAME_SERVER_CERTIFICATE_ID = "ServerCertificateId";
  @SerializedName(SERIALIZED_NAME_SERVER_CERTIFICATE_ID)
  @javax.annotation.Nonnull
  private String serverCertificateId;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  @javax.annotation.Nonnull
  private String arn;

  public static final String SERIALIZED_NAME_UPLOAD_DATE = "UploadDate";
  @SerializedName(SERIALIZED_NAME_UPLOAD_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime uploadDate;

  public static final String SERIALIZED_NAME_EXPIRATION = "Expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  @javax.annotation.Nullable
  private OffsetDateTime expiration;

  public ServerCertificateMetadata() {
  }

  public ServerCertificateMetadata path(@javax.annotation.Nonnull String path) {
    this.path = path;
    return this;
  }

  /**
   *  The path to the server certificate. For more information about paths, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. 
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nonnull String path) {
    this.path = path;
  }


  public ServerCertificateMetadata serverCertificateName(@javax.annotation.Nonnull String serverCertificateName) {
    this.serverCertificateName = serverCertificateName;
    return this;
  }

  /**
   * The name that identifies the server certificate.
   * @return serverCertificateName
   */
  @javax.annotation.Nonnull
  public String getServerCertificateName() {
    return serverCertificateName;
  }

  public void setServerCertificateName(@javax.annotation.Nonnull String serverCertificateName) {
    this.serverCertificateName = serverCertificateName;
  }


  public ServerCertificateMetadata serverCertificateId(@javax.annotation.Nonnull String serverCertificateId) {
    this.serverCertificateId = serverCertificateId;
    return this;
  }

  /**
   *  The stable and unique string identifying the server certificate. For more information about IDs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. 
   * @return serverCertificateId
   */
  @javax.annotation.Nonnull
  public String getServerCertificateId() {
    return serverCertificateId;
  }

  public void setServerCertificateId(@javax.annotation.Nonnull String serverCertificateId) {
    this.serverCertificateId = serverCertificateId;
  }


  public ServerCertificateMetadata arn(@javax.annotation.Nonnull String arn) {
    this.arn = arn;
    return this;
  }

  /**
   *  The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. 
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(@javax.annotation.Nonnull String arn) {
    this.arn = arn;
  }


  public ServerCertificateMetadata uploadDate(@javax.annotation.Nullable OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
    return this;
  }

  /**
   * The date when the server certificate was uploaded.
   * @return uploadDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUploadDate() {
    return uploadDate;
  }

  public void setUploadDate(@javax.annotation.Nullable OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
  }


  public ServerCertificateMetadata expiration(@javax.annotation.Nullable OffsetDateTime expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * The date on which the certificate is set to expire.
   * @return expiration
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiration() {
    return expiration;
  }

  public void setExpiration(@javax.annotation.Nullable OffsetDateTime expiration) {
    this.expiration = expiration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerCertificateMetadata serverCertificateMetadata = (ServerCertificateMetadata) o;
    return Objects.equals(this.path, serverCertificateMetadata.path) &&
        Objects.equals(this.serverCertificateName, serverCertificateMetadata.serverCertificateName) &&
        Objects.equals(this.serverCertificateId, serverCertificateMetadata.serverCertificateId) &&
        Objects.equals(this.arn, serverCertificateMetadata.arn) &&
        Objects.equals(this.uploadDate, serverCertificateMetadata.uploadDate) &&
        Objects.equals(this.expiration, serverCertificateMetadata.expiration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, serverCertificateName, serverCertificateId, arn, uploadDate, expiration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerCertificateMetadata {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    serverCertificateName: ").append(toIndentedString(serverCertificateName)).append("\n");
    sb.append("    serverCertificateId: ").append(toIndentedString(serverCertificateId)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Path", "ServerCertificateName", "ServerCertificateId", "Arn", "UploadDate", "Expiration"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("Path", "ServerCertificateName", "ServerCertificateId", "Arn"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerCertificateMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerCertificateMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerCertificateMetadata is not found in the empty JSON string", ServerCertificateMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerCertificateMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerCertificateMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServerCertificateMetadata.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if (!jsonObj.get("ServerCertificateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerCertificateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerCertificateName").toString()));
      }
      if (!jsonObj.get("ServerCertificateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerCertificateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerCertificateId").toString()));
      }
      if (!jsonObj.get("Arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Arn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerCertificateMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerCertificateMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerCertificateMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerCertificateMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerCertificateMetadata>() {
           @Override
           public void write(JsonWriter out, ServerCertificateMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerCertificateMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerCertificateMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerCertificateMetadata
   * @throws IOException if the JSON string is invalid with respect to ServerCertificateMetadata
   */
  public static ServerCertificateMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerCertificateMetadata.class);
  }

  /**
   * Convert an instance of ServerCertificateMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

