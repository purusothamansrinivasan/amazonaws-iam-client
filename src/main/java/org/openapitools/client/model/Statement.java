/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PolicySourceType;
import org.openapitools.client.model.Position;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains a reference to a &lt;code&gt;Statement&lt;/code&gt; element in a policy document that determines the result of the simulation.&lt;/p&gt; &lt;p&gt;This data type is used by the &lt;code&gt;MatchedStatements&lt;/code&gt; member of the &lt;code&gt; &lt;a&gt;EvaluationResult&lt;/a&gt; &lt;/code&gt; type.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class Statement {
  public static final String SERIALIZED_NAME_SOURCE_POLICY_ID = "SourcePolicyId";
  @SerializedName(SERIALIZED_NAME_SOURCE_POLICY_ID)
  @javax.annotation.Nullable
  private String sourcePolicyId;

  public static final String SERIALIZED_NAME_SOURCE_POLICY_TYPE = "SourcePolicyType";
  @SerializedName(SERIALIZED_NAME_SOURCE_POLICY_TYPE)
  @javax.annotation.Nullable
  private PolicySourceType sourcePolicyType;

  public static final String SERIALIZED_NAME_START_POSITION = "StartPosition";
  @SerializedName(SERIALIZED_NAME_START_POSITION)
  @javax.annotation.Nullable
  private Position startPosition;

  public static final String SERIALIZED_NAME_END_POSITION = "EndPosition";
  @SerializedName(SERIALIZED_NAME_END_POSITION)
  @javax.annotation.Nullable
  private Position endPosition;

  public Statement() {
  }

  public Statement sourcePolicyId(@javax.annotation.Nullable String sourcePolicyId) {
    this.sourcePolicyId = sourcePolicyId;
    return this;
  }

  /**
   * The identifier of the policy that was provided as an input.
   * @return sourcePolicyId
   */
  @javax.annotation.Nullable
  public String getSourcePolicyId() {
    return sourcePolicyId;
  }

  public void setSourcePolicyId(@javax.annotation.Nullable String sourcePolicyId) {
    this.sourcePolicyId = sourcePolicyId;
  }


  public Statement sourcePolicyType(@javax.annotation.Nullable PolicySourceType sourcePolicyType) {
    this.sourcePolicyType = sourcePolicyType;
    return this;
  }

  /**
   * The type of the policy.
   * @return sourcePolicyType
   */
  @javax.annotation.Nullable
  public PolicySourceType getSourcePolicyType() {
    return sourcePolicyType;
  }

  public void setSourcePolicyType(@javax.annotation.Nullable PolicySourceType sourcePolicyType) {
    this.sourcePolicyType = sourcePolicyType;
  }


  public Statement startPosition(@javax.annotation.Nullable Position startPosition) {
    this.startPosition = startPosition;
    return this;
  }

  /**
   * The row and column of the beginning of the &lt;code&gt;Statement&lt;/code&gt; in an IAM policy.
   * @return startPosition
   */
  @javax.annotation.Nullable
  public Position getStartPosition() {
    return startPosition;
  }

  public void setStartPosition(@javax.annotation.Nullable Position startPosition) {
    this.startPosition = startPosition;
  }


  public Statement endPosition(@javax.annotation.Nullable Position endPosition) {
    this.endPosition = endPosition;
    return this;
  }

  /**
   * The row and column of the end of a &lt;code&gt;Statement&lt;/code&gt; in an IAM policy.
   * @return endPosition
   */
  @javax.annotation.Nullable
  public Position getEndPosition() {
    return endPosition;
  }

  public void setEndPosition(@javax.annotation.Nullable Position endPosition) {
    this.endPosition = endPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Statement statement = (Statement) o;
    return Objects.equals(this.sourcePolicyId, statement.sourcePolicyId) &&
        Objects.equals(this.sourcePolicyType, statement.sourcePolicyType) &&
        Objects.equals(this.startPosition, statement.startPosition) &&
        Objects.equals(this.endPosition, statement.endPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourcePolicyId, sourcePolicyType, startPosition, endPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Statement {\n");
    sb.append("    sourcePolicyId: ").append(toIndentedString(sourcePolicyId)).append("\n");
    sb.append("    sourcePolicyType: ").append(toIndentedString(sourcePolicyType)).append("\n");
    sb.append("    startPosition: ").append(toIndentedString(startPosition)).append("\n");
    sb.append("    endPosition: ").append(toIndentedString(endPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("SourcePolicyId", "SourcePolicyType", "StartPosition", "EndPosition"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Statement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Statement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Statement is not found in the empty JSON string", Statement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Statement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Statement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("SourcePolicyId") != null && !jsonObj.get("SourcePolicyId").isJsonNull()) && !jsonObj.get("SourcePolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourcePolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourcePolicyId").toString()));
      }
      // validate the optional field `SourcePolicyType`
      if (jsonObj.get("SourcePolicyType") != null && !jsonObj.get("SourcePolicyType").isJsonNull()) {
        PolicySourceType.validateJsonElement(jsonObj.get("SourcePolicyType"));
      }
      // validate the optional field `StartPosition`
      if (jsonObj.get("StartPosition") != null && !jsonObj.get("StartPosition").isJsonNull()) {
        Position.validateJsonElement(jsonObj.get("StartPosition"));
      }
      // validate the optional field `EndPosition`
      if (jsonObj.get("EndPosition") != null && !jsonObj.get("EndPosition").isJsonNull()) {
        Position.validateJsonElement(jsonObj.get("EndPosition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Statement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Statement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Statement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Statement.class));

       return (TypeAdapter<T>) new TypeAdapter<Statement>() {
           @Override
           public void write(JsonWriter out, Statement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Statement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Statement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Statement
   * @throws IOException if the JSON string is invalid with respect to Statement
   */
  public static Statement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Statement.class);
  }

  /**
   * Convert an instance of Statement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

