/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PolicyOwnerEntityType;
import org.openapitools.client.model.PolicyType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains details about the permissions policies that are attached to the specified identity (user, group, or role).&lt;/p&gt; &lt;p&gt;This data type is an element of the &lt;a&gt;ListPoliciesGrantingServiceAccessEntry&lt;/a&gt; object.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class PolicyGrantingServiceAccess {
  public static final String SERIALIZED_NAME_POLICY_NAME = "PolicyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  @javax.annotation.Nonnull
  private String policyName;

  public static final String SERIALIZED_NAME_POLICY_TYPE = "PolicyType";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  @javax.annotation.Nonnull
  private PolicyType policyType;

  public static final String SERIALIZED_NAME_POLICY_ARN = "PolicyArn";
  @SerializedName(SERIALIZED_NAME_POLICY_ARN)
  @javax.annotation.Nullable
  private String policyArn;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "EntityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  @javax.annotation.Nullable
  private PolicyOwnerEntityType entityType;

  public static final String SERIALIZED_NAME_ENTITY_NAME = "EntityName";
  @SerializedName(SERIALIZED_NAME_ENTITY_NAME)
  @javax.annotation.Nullable
  private String entityName;

  public PolicyGrantingServiceAccess() {
  }

  public PolicyGrantingServiceAccess policyName(@javax.annotation.Nonnull String policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * The policy name.
   * @return policyName
   */
  @javax.annotation.Nonnull
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(@javax.annotation.Nonnull String policyName) {
    this.policyName = policyName;
  }


  public PolicyGrantingServiceAccess policyType(@javax.annotation.Nonnull PolicyType policyType) {
    this.policyType = policyType;
    return this;
  }

  /**
   * The policy type. For more information about these policy types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html\&quot;&gt;Managed policies and inline policies&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.
   * @return policyType
   */
  @javax.annotation.Nonnull
  public PolicyType getPolicyType() {
    return policyType;
  }

  public void setPolicyType(@javax.annotation.Nonnull PolicyType policyType) {
    this.policyType = policyType;
  }


  public PolicyGrantingServiceAccess policyArn(@javax.annotation.Nullable String policyArn) {
    this.policyArn = policyArn;
    return this;
  }

  /**
   * &lt;p&gt;The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.&lt;/p&gt; &lt;p&gt;For more information about ARNs, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;. &lt;/p&gt;
   * @return policyArn
   */
  @javax.annotation.Nullable
  public String getPolicyArn() {
    return policyArn;
  }

  public void setPolicyArn(@javax.annotation.Nullable String policyArn) {
    this.policyArn = policyArn;
  }


  public PolicyGrantingServiceAccess entityType(@javax.annotation.Nullable PolicyOwnerEntityType entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * &lt;p&gt;The type of entity (user or role) that used the policy to access the service to which the inline policy is attached.&lt;/p&gt; &lt;p&gt;This field is null for managed policies. For more information about these policy types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html\&quot;&gt;Managed policies and inline policies&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;
   * @return entityType
   */
  @javax.annotation.Nullable
  public PolicyOwnerEntityType getEntityType() {
    return entityType;
  }

  public void setEntityType(@javax.annotation.Nullable PolicyOwnerEntityType entityType) {
    this.entityType = entityType;
  }


  public PolicyGrantingServiceAccess entityName(@javax.annotation.Nullable String entityName) {
    this.entityName = entityName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the entity (user or role) to which the inline policy is attached.&lt;/p&gt; &lt;p&gt;This field is null for managed policies. For more information about these policy types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html\&quot;&gt;Managed policies and inline policies&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;
   * @return entityName
   */
  @javax.annotation.Nullable
  public String getEntityName() {
    return entityName;
  }

  public void setEntityName(@javax.annotation.Nullable String entityName) {
    this.entityName = entityName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyGrantingServiceAccess policyGrantingServiceAccess = (PolicyGrantingServiceAccess) o;
    return Objects.equals(this.policyName, policyGrantingServiceAccess.policyName) &&
        Objects.equals(this.policyType, policyGrantingServiceAccess.policyType) &&
        Objects.equals(this.policyArn, policyGrantingServiceAccess.policyArn) &&
        Objects.equals(this.entityType, policyGrantingServiceAccess.entityType) &&
        Objects.equals(this.entityName, policyGrantingServiceAccess.entityName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyName, policyType, policyArn, entityType, entityName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyGrantingServiceAccess {\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    policyArn: ").append(toIndentedString(policyArn)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("PolicyName", "PolicyType", "PolicyArn", "EntityType", "EntityName"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("PolicyName", "PolicyType"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyGrantingServiceAccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyGrantingServiceAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyGrantingServiceAccess is not found in the empty JSON string", PolicyGrantingServiceAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyGrantingServiceAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyGrantingServiceAccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PolicyGrantingServiceAccess.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("PolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyName").toString()));
      }
      // validate the required field `PolicyType`
      PolicyType.validateJsonElement(jsonObj.get("PolicyType"));
      if ((jsonObj.get("PolicyArn") != null && !jsonObj.get("PolicyArn").isJsonNull()) && !jsonObj.get("PolicyArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyArn").toString()));
      }
      // validate the optional field `EntityType`
      if (jsonObj.get("EntityType") != null && !jsonObj.get("EntityType").isJsonNull()) {
        PolicyOwnerEntityType.validateJsonElement(jsonObj.get("EntityType"));
      }
      if ((jsonObj.get("EntityName") != null && !jsonObj.get("EntityName").isJsonNull()) && !jsonObj.get("EntityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EntityName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyGrantingServiceAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyGrantingServiceAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyGrantingServiceAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyGrantingServiceAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyGrantingServiceAccess>() {
           @Override
           public void write(JsonWriter out, PolicyGrantingServiceAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyGrantingServiceAccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyGrantingServiceAccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyGrantingServiceAccess
   * @throws IOException if the JSON string is invalid with respect to PolicyGrantingServiceAccess
   */
  public static PolicyGrantingServiceAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyGrantingServiceAccess.class);
  }

  /**
   * Convert an instance of PolicyGrantingServiceAccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

