/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttachedPermissionsBoundary;
import org.openapitools.client.model.AttachedPolicy;
import org.openapitools.client.model.InstanceProfile;
import org.openapitools.client.model.PolicyDetail;
import org.openapitools.client.model.RoleLastUsed;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about an IAM role, including all of the role&#39;s policies.&lt;/p&gt; &lt;p&gt;This data type is used as a response element in the &lt;a&gt;GetAccountAuthorizationDetails&lt;/a&gt; operation.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class RoleDetail {
  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nullable
  private String path;

  public static final String SERIALIZED_NAME_ROLE_NAME = "RoleName";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME)
  @javax.annotation.Nullable
  private String roleName;

  public static final String SERIALIZED_NAME_ROLE_ID = "RoleId";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  @javax.annotation.Nullable
  private String roleId;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  @javax.annotation.Nullable
  private String arn;

  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_ASSUME_ROLE_POLICY_DOCUMENT = "AssumeRolePolicyDocument";
  @SerializedName(SERIALIZED_NAME_ASSUME_ROLE_POLICY_DOCUMENT)
  @javax.annotation.Nullable
  private String assumeRolePolicyDocument;

  public static final String SERIALIZED_NAME_INSTANCE_PROFILE_LIST = "InstanceProfileList";
  @SerializedName(SERIALIZED_NAME_INSTANCE_PROFILE_LIST)
  @javax.annotation.Nullable
  private List<InstanceProfile> instanceProfileList;

  public static final String SERIALIZED_NAME_ROLE_POLICY_LIST = "RolePolicyList";
  @SerializedName(SERIALIZED_NAME_ROLE_POLICY_LIST)
  @javax.annotation.Nullable
  private List<PolicyDetail> rolePolicyList;

  public static final String SERIALIZED_NAME_ATTACHED_MANAGED_POLICIES = "AttachedManagedPolicies";
  @SerializedName(SERIALIZED_NAME_ATTACHED_MANAGED_POLICIES)
  @javax.annotation.Nullable
  private List<AttachedPolicy> attachedManagedPolicies;

  public static final String SERIALIZED_NAME_PERMISSIONS_BOUNDARY = "PermissionsBoundary";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_BOUNDARY)
  @javax.annotation.Nullable
  private AttachedPermissionsBoundary permissionsBoundary;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<Tag> tags;

  public static final String SERIALIZED_NAME_ROLE_LAST_USED = "RoleLastUsed";
  @SerializedName(SERIALIZED_NAME_ROLE_LAST_USED)
  @javax.annotation.Nullable
  private RoleLastUsed roleLastUsed;

  public RoleDetail() {
  }

  public RoleDetail path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * The path to the role. For more information about paths, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public RoleDetail roleName(@javax.annotation.Nullable String roleName) {
    this.roleName = roleName;
    return this;
  }

  /**
   * The friendly name that identifies the role.
   * @return roleName
   */
  @javax.annotation.Nullable
  public String getRoleName() {
    return roleName;
  }

  public void setRoleName(@javax.annotation.Nullable String roleName) {
    this.roleName = roleName;
  }


  public RoleDetail roleId(@javax.annotation.Nullable String roleId) {
    this.roleId = roleId;
    return this;
  }

  /**
   * The stable and unique string identifying the role. For more information about IDs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.
   * @return roleId
   */
  @javax.annotation.Nullable
  public String getRoleId() {
    return roleId;
  }

  public void setRoleId(@javax.annotation.Nullable String roleId) {
    this.roleId = roleId;
  }


  public RoleDetail arn(@javax.annotation.Nullable String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * &lt;p&gt;The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.&lt;/p&gt; &lt;p&gt;For more information about ARNs, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;. &lt;/p&gt;
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(@javax.annotation.Nullable String arn) {
    this.arn = arn;
  }


  public RoleDetail createDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * The date and time, in &lt;a href&#x3D;\&quot;http://www.iso.org/iso/iso8601\&quot;&gt;ISO 8601 date-time format&lt;/a&gt;, when the role was created.
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public RoleDetail assumeRolePolicyDocument(@javax.annotation.Nullable String assumeRolePolicyDocument) {
    this.assumeRolePolicyDocument = assumeRolePolicyDocument;
    return this;
  }

  /**
   * The trust policy that grants permission to assume the role.
   * @return assumeRolePolicyDocument
   */
  @javax.annotation.Nullable
  public String getAssumeRolePolicyDocument() {
    return assumeRolePolicyDocument;
  }

  public void setAssumeRolePolicyDocument(@javax.annotation.Nullable String assumeRolePolicyDocument) {
    this.assumeRolePolicyDocument = assumeRolePolicyDocument;
  }


  public RoleDetail instanceProfileList(@javax.annotation.Nullable List<InstanceProfile> instanceProfileList) {
    this.instanceProfileList = instanceProfileList;
    return this;
  }

  public RoleDetail addInstanceProfileListItem(InstanceProfile instanceProfileListItem) {
    if (this.instanceProfileList == null) {
      this.instanceProfileList = new ArrayList<>();
    }
    this.instanceProfileList.add(instanceProfileListItem);
    return this;
  }

  /**
   * A list of instance profiles that contain this role.
   * @return instanceProfileList
   */
  @javax.annotation.Nullable
  public List<InstanceProfile> getInstanceProfileList() {
    return instanceProfileList;
  }

  public void setInstanceProfileList(@javax.annotation.Nullable List<InstanceProfile> instanceProfileList) {
    this.instanceProfileList = instanceProfileList;
  }


  public RoleDetail rolePolicyList(@javax.annotation.Nullable List<PolicyDetail> rolePolicyList) {
    this.rolePolicyList = rolePolicyList;
    return this;
  }

  public RoleDetail addRolePolicyListItem(PolicyDetail rolePolicyListItem) {
    if (this.rolePolicyList == null) {
      this.rolePolicyList = new ArrayList<>();
    }
    this.rolePolicyList.add(rolePolicyListItem);
    return this;
  }

  /**
   * A list of inline policies embedded in the role. These policies are the role&#39;s access (permissions) policies.
   * @return rolePolicyList
   */
  @javax.annotation.Nullable
  public List<PolicyDetail> getRolePolicyList() {
    return rolePolicyList;
  }

  public void setRolePolicyList(@javax.annotation.Nullable List<PolicyDetail> rolePolicyList) {
    this.rolePolicyList = rolePolicyList;
  }


  public RoleDetail attachedManagedPolicies(@javax.annotation.Nullable List<AttachedPolicy> attachedManagedPolicies) {
    this.attachedManagedPolicies = attachedManagedPolicies;
    return this;
  }

  public RoleDetail addAttachedManagedPoliciesItem(AttachedPolicy attachedManagedPoliciesItem) {
    if (this.attachedManagedPolicies == null) {
      this.attachedManagedPolicies = new ArrayList<>();
    }
    this.attachedManagedPolicies.add(attachedManagedPoliciesItem);
    return this;
  }

  /**
   * A list of managed policies attached to the role. These policies are the role&#39;s access (permissions) policies.
   * @return attachedManagedPolicies
   */
  @javax.annotation.Nullable
  public List<AttachedPolicy> getAttachedManagedPolicies() {
    return attachedManagedPolicies;
  }

  public void setAttachedManagedPolicies(@javax.annotation.Nullable List<AttachedPolicy> attachedManagedPolicies) {
    this.attachedManagedPolicies = attachedManagedPolicies;
  }


  public RoleDetail permissionsBoundary(@javax.annotation.Nullable AttachedPermissionsBoundary permissionsBoundary) {
    this.permissionsBoundary = permissionsBoundary;
    return this;
  }

  /**
   * &lt;p&gt;The ARN of the policy used to set the permissions boundary for the role.&lt;/p&gt; &lt;p&gt;For more information about permissions boundaries, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html\&quot;&gt;Permissions boundaries for IAM identities &lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;
   * @return permissionsBoundary
   */
  @javax.annotation.Nullable
  public AttachedPermissionsBoundary getPermissionsBoundary() {
    return permissionsBoundary;
  }

  public void setPermissionsBoundary(@javax.annotation.Nullable AttachedPermissionsBoundary permissionsBoundary) {
    this.permissionsBoundary = permissionsBoundary;
  }


  public RoleDetail tags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public RoleDetail addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags that are attached to the role. For more information about tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\&quot;&gt;Tagging IAM resources&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
  }


  public RoleDetail roleLastUsed(@javax.annotation.Nullable RoleLastUsed roleLastUsed) {
    this.roleLastUsed = roleLastUsed;
    return this;
  }

  /**
   * Contains information about the last time that an IAM role was used. This includes the date and time and the Region in which the role was last used. Activity is only reported for the trailing 400 days. This period can be shorter if your Region began supporting these features within the last year. The role might have been used more than 400 days ago. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period\&quot;&gt;Regions where data is tracked&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.
   * @return roleLastUsed
   */
  @javax.annotation.Nullable
  public RoleLastUsed getRoleLastUsed() {
    return roleLastUsed;
  }

  public void setRoleLastUsed(@javax.annotation.Nullable RoleLastUsed roleLastUsed) {
    this.roleLastUsed = roleLastUsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoleDetail roleDetail = (RoleDetail) o;
    return Objects.equals(this.path, roleDetail.path) &&
        Objects.equals(this.roleName, roleDetail.roleName) &&
        Objects.equals(this.roleId, roleDetail.roleId) &&
        Objects.equals(this.arn, roleDetail.arn) &&
        Objects.equals(this.createDate, roleDetail.createDate) &&
        Objects.equals(this.assumeRolePolicyDocument, roleDetail.assumeRolePolicyDocument) &&
        Objects.equals(this.instanceProfileList, roleDetail.instanceProfileList) &&
        Objects.equals(this.rolePolicyList, roleDetail.rolePolicyList) &&
        Objects.equals(this.attachedManagedPolicies, roleDetail.attachedManagedPolicies) &&
        Objects.equals(this.permissionsBoundary, roleDetail.permissionsBoundary) &&
        Objects.equals(this.tags, roleDetail.tags) &&
        Objects.equals(this.roleLastUsed, roleDetail.roleLastUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, roleName, roleId, arn, createDate, assumeRolePolicyDocument, instanceProfileList, rolePolicyList, attachedManagedPolicies, permissionsBoundary, tags, roleLastUsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoleDetail {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    assumeRolePolicyDocument: ").append(toIndentedString(assumeRolePolicyDocument)).append("\n");
    sb.append("    instanceProfileList: ").append(toIndentedString(instanceProfileList)).append("\n");
    sb.append("    rolePolicyList: ").append(toIndentedString(rolePolicyList)).append("\n");
    sb.append("    attachedManagedPolicies: ").append(toIndentedString(attachedManagedPolicies)).append("\n");
    sb.append("    permissionsBoundary: ").append(toIndentedString(permissionsBoundary)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    roleLastUsed: ").append(toIndentedString(roleLastUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Path", "RoleName", "RoleId", "Arn", "CreateDate", "AssumeRolePolicyDocument", "InstanceProfileList", "RolePolicyList", "AttachedManagedPolicies", "PermissionsBoundary", "Tags", "RoleLastUsed"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoleDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoleDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoleDetail is not found in the empty JSON string", RoleDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoleDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoleDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("RoleName") != null && !jsonObj.get("RoleName").isJsonNull()) && !jsonObj.get("RoleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleName").toString()));
      }
      if ((jsonObj.get("RoleId") != null && !jsonObj.get("RoleId").isJsonNull()) && !jsonObj.get("RoleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleId").toString()));
      }
      if ((jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) && !jsonObj.get("Arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Arn").toString()));
      }
      if ((jsonObj.get("AssumeRolePolicyDocument") != null && !jsonObj.get("AssumeRolePolicyDocument").isJsonNull()) && !jsonObj.get("AssumeRolePolicyDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssumeRolePolicyDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssumeRolePolicyDocument").toString()));
      }
      if (jsonObj.get("InstanceProfileList") != null && !jsonObj.get("InstanceProfileList").isJsonNull()) {
        JsonArray jsonArrayinstanceProfileList = jsonObj.getAsJsonArray("InstanceProfileList");
        if (jsonArrayinstanceProfileList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("InstanceProfileList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `InstanceProfileList` to be an array in the JSON string but got `%s`", jsonObj.get("InstanceProfileList").toString()));
          }

          // validate the optional field `InstanceProfileList` (array)
          for (int i = 0; i < jsonArrayinstanceProfileList.size(); i++) {
            InstanceProfile.validateJsonElement(jsonArrayinstanceProfileList.get(i));
          };
        }
      }
      if (jsonObj.get("RolePolicyList") != null && !jsonObj.get("RolePolicyList").isJsonNull()) {
        JsonArray jsonArrayrolePolicyList = jsonObj.getAsJsonArray("RolePolicyList");
        if (jsonArrayrolePolicyList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RolePolicyList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RolePolicyList` to be an array in the JSON string but got `%s`", jsonObj.get("RolePolicyList").toString()));
          }

          // validate the optional field `RolePolicyList` (array)
          for (int i = 0; i < jsonArrayrolePolicyList.size(); i++) {
            PolicyDetail.validateJsonElement(jsonArrayrolePolicyList.get(i));
          };
        }
      }
      if (jsonObj.get("AttachedManagedPolicies") != null && !jsonObj.get("AttachedManagedPolicies").isJsonNull()) {
        JsonArray jsonArrayattachedManagedPolicies = jsonObj.getAsJsonArray("AttachedManagedPolicies");
        if (jsonArrayattachedManagedPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AttachedManagedPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AttachedManagedPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("AttachedManagedPolicies").toString()));
          }

          // validate the optional field `AttachedManagedPolicies` (array)
          for (int i = 0; i < jsonArrayattachedManagedPolicies.size(); i++) {
            AttachedPolicy.validateJsonElement(jsonArrayattachedManagedPolicies.get(i));
          };
        }
      }
      // validate the optional field `PermissionsBoundary`
      if (jsonObj.get("PermissionsBoundary") != null && !jsonObj.get("PermissionsBoundary").isJsonNull()) {
        AttachedPermissionsBoundary.validateJsonElement(jsonObj.get("PermissionsBoundary"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      // validate the optional field `RoleLastUsed`
      if (jsonObj.get("RoleLastUsed") != null && !jsonObj.get("RoleLastUsed").isJsonNull()) {
        RoleLastUsed.validateJsonElement(jsonObj.get("RoleLastUsed"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoleDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoleDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoleDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoleDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<RoleDetail>() {
           @Override
           public void write(JsonWriter out, RoleDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoleDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoleDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoleDetail
   * @throws IOException if the JSON string is invalid with respect to RoleDetail
   */
  public static RoleDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoleDetail.class);
  }

  /**
   * Convert an instance of RoleDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

