/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the response to a successful &lt;a&gt;GetRolePolicy&lt;/a&gt; request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GetRolePolicyResponse {
  public static final String SERIALIZED_NAME_ROLE_NAME = "RoleName";
  @SerializedName(SERIALIZED_NAME_ROLE_NAME)
  @javax.annotation.Nonnull
  private String roleName;

  public static final String SERIALIZED_NAME_POLICY_NAME = "PolicyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  @javax.annotation.Nonnull
  private String policyName;

  public static final String SERIALIZED_NAME_POLICY_DOCUMENT = "PolicyDocument";
  @SerializedName(SERIALIZED_NAME_POLICY_DOCUMENT)
  @javax.annotation.Nonnull
  private String policyDocument;

  public GetRolePolicyResponse() {
  }

  public GetRolePolicyResponse roleName(@javax.annotation.Nonnull String roleName) {
    this.roleName = roleName;
    return this;
  }

  /**
   * The role the policy is associated with.
   * @return roleName
   */
  @javax.annotation.Nonnull
  public String getRoleName() {
    return roleName;
  }

  public void setRoleName(@javax.annotation.Nonnull String roleName) {
    this.roleName = roleName;
  }


  public GetRolePolicyResponse policyName(@javax.annotation.Nonnull String policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * The name of the policy.
   * @return policyName
   */
  @javax.annotation.Nonnull
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(@javax.annotation.Nonnull String policyName) {
    this.policyName = policyName;
  }


  public GetRolePolicyResponse policyDocument(@javax.annotation.Nonnull String policyDocument) {
    this.policyDocument = policyDocument;
    return this;
  }

  /**
   * &lt;p&gt;The policy document.&lt;/p&gt; &lt;p&gt;IAM stores policies in JSON format. However, resources that were created using CloudFormation templates can be formatted in YAML. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.&lt;/p&gt;
   * @return policyDocument
   */
  @javax.annotation.Nonnull
  public String getPolicyDocument() {
    return policyDocument;
  }

  public void setPolicyDocument(@javax.annotation.Nonnull String policyDocument) {
    this.policyDocument = policyDocument;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRolePolicyResponse getRolePolicyResponse = (GetRolePolicyResponse) o;
    return Objects.equals(this.roleName, getRolePolicyResponse.roleName) &&
        Objects.equals(this.policyName, getRolePolicyResponse.policyName) &&
        Objects.equals(this.policyDocument, getRolePolicyResponse.policyDocument);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roleName, policyName, policyDocument);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRolePolicyResponse {\n");
    sb.append("    roleName: ").append(toIndentedString(roleName)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyDocument: ").append(toIndentedString(policyDocument)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("RoleName", "PolicyName", "PolicyDocument"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("RoleName", "PolicyName", "PolicyDocument"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRolePolicyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRolePolicyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRolePolicyResponse is not found in the empty JSON string", GetRolePolicyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRolePolicyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRolePolicyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetRolePolicyResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("RoleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleName").toString()));
      }
      if (!jsonObj.get("PolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyName").toString()));
      }
      if (!jsonObj.get("PolicyDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyDocument").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRolePolicyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRolePolicyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRolePolicyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRolePolicyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRolePolicyResponse>() {
           @Override
           public void write(JsonWriter out, GetRolePolicyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRolePolicyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRolePolicyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRolePolicyResponse
   * @throws IOException if the JSON string is invalid with respect to GetRolePolicyResponse
   */
  public static GetRolePolicyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRolePolicyResponse.class);
  }

  /**
   * Convert an instance of GetRolePolicyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

