/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the response to a successful &lt;a&gt;GetContextKeysForPrincipalPolicy&lt;/a&gt; or &lt;a&gt;GetContextKeysForCustomPolicy&lt;/a&gt; request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GetContextKeysForPolicyResponse {
  public static final String SERIALIZED_NAME_CONTEXT_KEY_NAMES = "ContextKeyNames";
  @SerializedName(SERIALIZED_NAME_CONTEXT_KEY_NAMES)
  @javax.annotation.Nullable
  private List<String> contextKeyNames;

  public GetContextKeysForPolicyResponse() {
  }

  public GetContextKeysForPolicyResponse contextKeyNames(@javax.annotation.Nullable List<String> contextKeyNames) {
    this.contextKeyNames = contextKeyNames;
    return this;
  }

  public GetContextKeysForPolicyResponse addContextKeyNamesItem(String contextKeyNamesItem) {
    if (this.contextKeyNames == null) {
      this.contextKeyNames = new ArrayList<>();
    }
    this.contextKeyNames.add(contextKeyNamesItem);
    return this;
  }

  /**
   * The list of context keys that are referenced in the input policies.
   * @return contextKeyNames
   */
  @javax.annotation.Nullable
  public List<String> getContextKeyNames() {
    return contextKeyNames;
  }

  public void setContextKeyNames(@javax.annotation.Nullable List<String> contextKeyNames) {
    this.contextKeyNames = contextKeyNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetContextKeysForPolicyResponse getContextKeysForPolicyResponse = (GetContextKeysForPolicyResponse) o;
    return Objects.equals(this.contextKeyNames, getContextKeysForPolicyResponse.contextKeyNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contextKeyNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetContextKeysForPolicyResponse {\n");
    sb.append("    contextKeyNames: ").append(toIndentedString(contextKeyNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ContextKeyNames"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetContextKeysForPolicyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetContextKeysForPolicyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetContextKeysForPolicyResponse is not found in the empty JSON string", GetContextKeysForPolicyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetContextKeysForPolicyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetContextKeysForPolicyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ContextKeyNames") != null && !jsonObj.get("ContextKeyNames").isJsonNull() && !jsonObj.get("ContextKeyNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContextKeyNames` to be an array in the JSON string but got `%s`", jsonObj.get("ContextKeyNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetContextKeysForPolicyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetContextKeysForPolicyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetContextKeysForPolicyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetContextKeysForPolicyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetContextKeysForPolicyResponse>() {
           @Override
           public void write(JsonWriter out, GetContextKeysForPolicyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetContextKeysForPolicyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetContextKeysForPolicyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetContextKeysForPolicyResponse
   * @throws IOException if the JSON string is invalid with respect to GetContextKeysForPolicyResponse
   */
  public static GetContextKeysForPolicyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetContextKeysForPolicyResponse.class);
  }

  /**
   * Convert an instance of GetContextKeysForPolicyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

