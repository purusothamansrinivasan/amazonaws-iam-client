/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PermissionsBoundaryAttachmentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about an attached permissions boundary.&lt;/p&gt; &lt;p&gt;An attached permissions boundary is a managed policy that has been attached to a user or role to set the permissions boundary.&lt;/p&gt; &lt;p&gt;For more information about permissions boundaries, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html\&quot;&gt;Permissions boundaries for IAM identities &lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class AttachedPermissionsBoundary {
  public static final String SERIALIZED_NAME_PERMISSIONS_BOUNDARY_TYPE = "PermissionsBoundaryType";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_BOUNDARY_TYPE)
  @javax.annotation.Nullable
  private PermissionsBoundaryAttachmentType permissionsBoundaryType;

  public static final String SERIALIZED_NAME_PERMISSIONS_BOUNDARY_ARN = "PermissionsBoundaryArn";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_BOUNDARY_ARN)
  @javax.annotation.Nullable
  private String permissionsBoundaryArn;

  public AttachedPermissionsBoundary() {
  }

  public AttachedPermissionsBoundary permissionsBoundaryType(@javax.annotation.Nullable PermissionsBoundaryAttachmentType permissionsBoundaryType) {
    this.permissionsBoundaryType = permissionsBoundaryType;
    return this;
  }

  /**
   *  The permissions boundary usage type that indicates what type of IAM resource is used as the permissions boundary for an entity. This data type can only have a value of &lt;code&gt;Policy&lt;/code&gt;.
   * @return permissionsBoundaryType
   */
  @javax.annotation.Nullable
  public PermissionsBoundaryAttachmentType getPermissionsBoundaryType() {
    return permissionsBoundaryType;
  }

  public void setPermissionsBoundaryType(@javax.annotation.Nullable PermissionsBoundaryAttachmentType permissionsBoundaryType) {
    this.permissionsBoundaryType = permissionsBoundaryType;
  }


  public AttachedPermissionsBoundary permissionsBoundaryArn(@javax.annotation.Nullable String permissionsBoundaryArn) {
    this.permissionsBoundaryArn = permissionsBoundaryArn;
    return this;
  }

  /**
   *  The ARN of the policy used to set the permissions boundary for the user or role.
   * @return permissionsBoundaryArn
   */
  @javax.annotation.Nullable
  public String getPermissionsBoundaryArn() {
    return permissionsBoundaryArn;
  }

  public void setPermissionsBoundaryArn(@javax.annotation.Nullable String permissionsBoundaryArn) {
    this.permissionsBoundaryArn = permissionsBoundaryArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachedPermissionsBoundary attachedPermissionsBoundary = (AttachedPermissionsBoundary) o;
    return Objects.equals(this.permissionsBoundaryType, attachedPermissionsBoundary.permissionsBoundaryType) &&
        Objects.equals(this.permissionsBoundaryArn, attachedPermissionsBoundary.permissionsBoundaryArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(permissionsBoundaryType, permissionsBoundaryArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachedPermissionsBoundary {\n");
    sb.append("    permissionsBoundaryType: ").append(toIndentedString(permissionsBoundaryType)).append("\n");
    sb.append("    permissionsBoundaryArn: ").append(toIndentedString(permissionsBoundaryArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("PermissionsBoundaryType", "PermissionsBoundaryArn"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttachedPermissionsBoundary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttachedPermissionsBoundary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttachedPermissionsBoundary is not found in the empty JSON string", AttachedPermissionsBoundary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttachedPermissionsBoundary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttachedPermissionsBoundary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PermissionsBoundaryType`
      if (jsonObj.get("PermissionsBoundaryType") != null && !jsonObj.get("PermissionsBoundaryType").isJsonNull()) {
        PermissionsBoundaryAttachmentType.validateJsonElement(jsonObj.get("PermissionsBoundaryType"));
      }
      if ((jsonObj.get("PermissionsBoundaryArn") != null && !jsonObj.get("PermissionsBoundaryArn").isJsonNull()) && !jsonObj.get("PermissionsBoundaryArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermissionsBoundaryArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PermissionsBoundaryArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttachedPermissionsBoundary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttachedPermissionsBoundary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttachedPermissionsBoundary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttachedPermissionsBoundary.class));

       return (TypeAdapter<T>) new TypeAdapter<AttachedPermissionsBoundary>() {
           @Override
           public void write(JsonWriter out, AttachedPermissionsBoundary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttachedPermissionsBoundary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttachedPermissionsBoundary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttachedPermissionsBoundary
   * @throws IOException if the JSON string is invalid with respect to AttachedPermissionsBoundary
   */
  public static AttachedPermissionsBoundary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttachedPermissionsBoundary.class);
  }

  /**
   * Convert an instance of AttachedPermissionsBoundary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

