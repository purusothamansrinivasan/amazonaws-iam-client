/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServerCertificateMetadata;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about a server certificate.&lt;/p&gt; &lt;p&gt; This data type is used as a response element in the &lt;a&gt;GetServerCertificate&lt;/a&gt; operation. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ServerCertificate {
  public static final String SERIALIZED_NAME_SERVER_CERTIFICATE_METADATA = "ServerCertificateMetadata";
  @SerializedName(SERIALIZED_NAME_SERVER_CERTIFICATE_METADATA)
  @javax.annotation.Nonnull
  private ServerCertificateMetadata serverCertificateMetadata;

  public static final String SERIALIZED_NAME_CERTIFICATE_BODY = "CertificateBody";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_BODY)
  @javax.annotation.Nonnull
  private String certificateBody;

  public static final String SERIALIZED_NAME_CERTIFICATE_CHAIN = "CertificateChain";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_CHAIN)
  @javax.annotation.Nullable
  private String certificateChain;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<Tag> tags;

  public ServerCertificate() {
  }

  public ServerCertificate serverCertificateMetadata(@javax.annotation.Nonnull ServerCertificateMetadata serverCertificateMetadata) {
    this.serverCertificateMetadata = serverCertificateMetadata;
    return this;
  }

  /**
   * The meta information of the server certificate, such as its name, path, ID, and ARN.
   * @return serverCertificateMetadata
   */
  @javax.annotation.Nonnull
  public ServerCertificateMetadata getServerCertificateMetadata() {
    return serverCertificateMetadata;
  }

  public void setServerCertificateMetadata(@javax.annotation.Nonnull ServerCertificateMetadata serverCertificateMetadata) {
    this.serverCertificateMetadata = serverCertificateMetadata;
  }


  public ServerCertificate certificateBody(@javax.annotation.Nonnull String certificateBody) {
    this.certificateBody = certificateBody;
    return this;
  }

  /**
   * The contents of the public key certificate.
   * @return certificateBody
   */
  @javax.annotation.Nonnull
  public String getCertificateBody() {
    return certificateBody;
  }

  public void setCertificateBody(@javax.annotation.Nonnull String certificateBody) {
    this.certificateBody = certificateBody;
  }


  public ServerCertificate certificateChain(@javax.annotation.Nullable String certificateChain) {
    this.certificateChain = certificateChain;
    return this;
  }

  /**
   * The contents of the public key certificate chain.
   * @return certificateChain
   */
  @javax.annotation.Nullable
  public String getCertificateChain() {
    return certificateChain;
  }

  public void setCertificateChain(@javax.annotation.Nullable String certificateChain) {
    this.certificateChain = certificateChain;
  }


  public ServerCertificate tags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public ServerCertificate addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags that are attached to the server certificate. For more information about tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\&quot;&gt;Tagging IAM resources&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerCertificate serverCertificate = (ServerCertificate) o;
    return Objects.equals(this.serverCertificateMetadata, serverCertificate.serverCertificateMetadata) &&
        Objects.equals(this.certificateBody, serverCertificate.certificateBody) &&
        Objects.equals(this.certificateChain, serverCertificate.certificateChain) &&
        Objects.equals(this.tags, serverCertificate.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverCertificateMetadata, certificateBody, certificateChain, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerCertificate {\n");
    sb.append("    serverCertificateMetadata: ").append(toIndentedString(serverCertificateMetadata)).append("\n");
    sb.append("    certificateBody: ").append(toIndentedString(certificateBody)).append("\n");
    sb.append("    certificateChain: ").append(toIndentedString(certificateChain)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ServerCertificateMetadata", "CertificateBody", "CertificateChain", "Tags"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("ServerCertificateMetadata", "CertificateBody"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerCertificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerCertificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerCertificate is not found in the empty JSON string", ServerCertificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerCertificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerCertificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServerCertificate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ServerCertificateMetadata`
      ServerCertificateMetadata.validateJsonElement(jsonObj.get("ServerCertificateMetadata"));
      if (!jsonObj.get("CertificateBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificateBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificateBody").toString()));
      }
      if ((jsonObj.get("CertificateChain") != null && !jsonObj.get("CertificateChain").isJsonNull()) && !jsonObj.get("CertificateChain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificateChain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificateChain").toString()));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerCertificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerCertificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerCertificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerCertificate.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerCertificate>() {
           @Override
           public void write(JsonWriter out, ServerCertificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerCertificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerCertificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerCertificate
   * @throws IOException if the JSON string is invalid with respect to ServerCertificate
   */
  public static ServerCertificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerCertificate.class);
  }

  /**
   * Convert an instance of ServerCertificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

