/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UntagSAMLProviderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class UntagSAMLProviderRequest {
  public static final String SERIALIZED_NAME_SA_M_L_PROVIDER_ARN = "SAMLProviderArn";
  @SerializedName(SERIALIZED_NAME_SA_M_L_PROVIDER_ARN)
  @javax.annotation.Nonnull
  private String saMLProviderArn;

  public static final String SERIALIZED_NAME_TAG_KEYS = "TagKeys";
  @SerializedName(SERIALIZED_NAME_TAG_KEYS)
  @javax.annotation.Nonnull
  private List<String> tagKeys;

  public UntagSAMLProviderRequest() {
  }

  public UntagSAMLProviderRequest saMLProviderArn(@javax.annotation.Nonnull String saMLProviderArn) {
    this.saMLProviderArn = saMLProviderArn;
    return this;
  }

  /**
   * &lt;p&gt;The ARN of the SAML identity provider in IAM from which you want to remove tags.&lt;/p&gt; &lt;p&gt;This parameter allows (through its &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt;) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+&#x3D;,.@-&lt;/p&gt;
   * @return saMLProviderArn
   */
  @javax.annotation.Nonnull
  public String getSaMLProviderArn() {
    return saMLProviderArn;
  }

  public void setSaMLProviderArn(@javax.annotation.Nonnull String saMLProviderArn) {
    this.saMLProviderArn = saMLProviderArn;
  }


  public UntagSAMLProviderRequest tagKeys(@javax.annotation.Nonnull List<String> tagKeys) {
    this.tagKeys = tagKeys;
    return this;
  }

  public UntagSAMLProviderRequest addTagKeysItem(String tagKeysItem) {
    if (this.tagKeys == null) {
      this.tagKeys = new ArrayList<>();
    }
    this.tagKeys.add(tagKeysItem);
    return this;
  }

  /**
   * A list of key names as a simple array of strings. The tags with matching keys are removed from the specified SAML identity provider.
   * @return tagKeys
   */
  @javax.annotation.Nonnull
  public List<String> getTagKeys() {
    return tagKeys;
  }

  public void setTagKeys(@javax.annotation.Nonnull List<String> tagKeys) {
    this.tagKeys = tagKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UntagSAMLProviderRequest untagSAMLProviderRequest = (UntagSAMLProviderRequest) o;
    return Objects.equals(this.saMLProviderArn, untagSAMLProviderRequest.saMLProviderArn) &&
        Objects.equals(this.tagKeys, untagSAMLProviderRequest.tagKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(saMLProviderArn, tagKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UntagSAMLProviderRequest {\n");
    sb.append("    saMLProviderArn: ").append(toIndentedString(saMLProviderArn)).append("\n");
    sb.append("    tagKeys: ").append(toIndentedString(tagKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("SAMLProviderArn", "TagKeys"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("SAMLProviderArn", "TagKeys"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UntagSAMLProviderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UntagSAMLProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UntagSAMLProviderRequest is not found in the empty JSON string", UntagSAMLProviderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UntagSAMLProviderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UntagSAMLProviderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UntagSAMLProviderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("SAMLProviderArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SAMLProviderArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SAMLProviderArn").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("TagKeys") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("TagKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TagKeys` to be an array in the JSON string but got `%s`", jsonObj.get("TagKeys").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UntagSAMLProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UntagSAMLProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UntagSAMLProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UntagSAMLProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UntagSAMLProviderRequest>() {
           @Override
           public void write(JsonWriter out, UntagSAMLProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UntagSAMLProviderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UntagSAMLProviderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UntagSAMLProviderRequest
   * @throws IOException if the JSON string is invalid with respect to UntagSAMLProviderRequest
   */
  public static UntagSAMLProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UntagSAMLProviderRequest.class);
  }

  /**
   * Convert an instance of UntagSAMLProviderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

