/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about an instance profile.&lt;/p&gt; &lt;p&gt;This data type is used as a response element in the following operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;CreateInstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;GetInstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListInstanceProfiles&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a&gt;ListInstanceProfilesForRole&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class InstanceProfile {
  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nonnull
  private String path;

  public static final String SERIALIZED_NAME_INSTANCE_PROFILE_NAME = "InstanceProfileName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_PROFILE_NAME)
  @javax.annotation.Nonnull
  private String instanceProfileName;

  public static final String SERIALIZED_NAME_INSTANCE_PROFILE_ID = "InstanceProfileId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_PROFILE_ID)
  @javax.annotation.Nonnull
  private String instanceProfileId;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  @javax.annotation.Nonnull
  private String arn;

  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_ROLES = "Roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  @javax.annotation.Nonnull
  private List<Role> roles;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<Tag> tags;

  public InstanceProfile() {
  }

  public InstanceProfile path(@javax.annotation.Nonnull String path) {
    this.path = path;
    return this;
  }

  /**
   *  The path to the instance profile. For more information about paths, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. 
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nonnull String path) {
    this.path = path;
  }


  public InstanceProfile instanceProfileName(@javax.annotation.Nonnull String instanceProfileName) {
    this.instanceProfileName = instanceProfileName;
    return this;
  }

  /**
   * The name identifying the instance profile.
   * @return instanceProfileName
   */
  @javax.annotation.Nonnull
  public String getInstanceProfileName() {
    return instanceProfileName;
  }

  public void setInstanceProfileName(@javax.annotation.Nonnull String instanceProfileName) {
    this.instanceProfileName = instanceProfileName;
  }


  public InstanceProfile instanceProfileId(@javax.annotation.Nonnull String instanceProfileId) {
    this.instanceProfileId = instanceProfileId;
    return this;
  }

  /**
   *  The stable and unique string identifying the instance profile. For more information about IDs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. 
   * @return instanceProfileId
   */
  @javax.annotation.Nonnull
  public String getInstanceProfileId() {
    return instanceProfileId;
  }

  public void setInstanceProfileId(@javax.annotation.Nonnull String instanceProfileId) {
    this.instanceProfileId = instanceProfileId;
  }


  public InstanceProfile arn(@javax.annotation.Nonnull String arn) {
    this.arn = arn;
    return this;
  }

  /**
   *  The Amazon Resource Name (ARN) specifying the instance profile. For more information about ARNs and how to use them in policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. 
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(@javax.annotation.Nonnull String arn) {
    this.arn = arn;
  }


  public InstanceProfile createDate(@javax.annotation.Nonnull OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * The date when the instance profile was created.
   * @return createDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(@javax.annotation.Nonnull OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public InstanceProfile roles(@javax.annotation.Nonnull List<Role> roles) {
    this.roles = roles;
    return this;
  }

  public InstanceProfile addRolesItem(Role rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * The role associated with the instance profile.
   * @return roles
   */
  @javax.annotation.Nonnull
  public List<Role> getRoles() {
    return roles;
  }

  public void setRoles(@javax.annotation.Nonnull List<Role> roles) {
    this.roles = roles;
  }


  public InstanceProfile tags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public InstanceProfile addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags that are attached to the instance profile. For more information about tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\&quot;&gt;Tagging IAM resources&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceProfile instanceProfile = (InstanceProfile) o;
    return Objects.equals(this.path, instanceProfile.path) &&
        Objects.equals(this.instanceProfileName, instanceProfile.instanceProfileName) &&
        Objects.equals(this.instanceProfileId, instanceProfile.instanceProfileId) &&
        Objects.equals(this.arn, instanceProfile.arn) &&
        Objects.equals(this.createDate, instanceProfile.createDate) &&
        Objects.equals(this.roles, instanceProfile.roles) &&
        Objects.equals(this.tags, instanceProfile.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, instanceProfileName, instanceProfileId, arn, createDate, roles, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceProfile {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    instanceProfileName: ").append(toIndentedString(instanceProfileName)).append("\n");
    sb.append("    instanceProfileId: ").append(toIndentedString(instanceProfileId)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Path", "InstanceProfileName", "InstanceProfileId", "Arn", "CreateDate", "Roles", "Tags"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("Path", "InstanceProfileName", "InstanceProfileId", "Arn", "CreateDate", "Roles"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceProfile is not found in the empty JSON string", InstanceProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstanceProfile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if (!jsonObj.get("InstanceProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceProfileName").toString()));
      }
      if (!jsonObj.get("InstanceProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstanceProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstanceProfileId").toString()));
      }
      if (!jsonObj.get("Arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Arn").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Roles` to be an array in the JSON string but got `%s`", jsonObj.get("Roles").toString()));
      }

      JsonArray jsonArrayroles = jsonObj.getAsJsonArray("Roles");
      // validate the required field `Roles` (array)
      for (int i = 0; i < jsonArrayroles.size(); i++) {
        Role.validateJsonElement(jsonArrayroles.get(i));
      };
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceProfile>() {
           @Override
           public void write(JsonWriter out, InstanceProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceProfile
   * @throws IOException if the JSON string is invalid with respect to InstanceProfile
   */
  public static InstanceProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceProfile.class);
  }

  /**
   * Convert an instance of InstanceProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

