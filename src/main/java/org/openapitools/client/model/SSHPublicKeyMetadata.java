/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about an SSH public key, without the key&#39;s body or fingerprint.&lt;/p&gt; &lt;p&gt;This data type is used as a response element in the &lt;a&gt;ListSSHPublicKeys&lt;/a&gt; operation.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class SSHPublicKeyMetadata {
  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  @javax.annotation.Nonnull
  private String userName;

  public static final String SERIALIZED_NAME_SS_H_PUBLIC_KEY_ID = "SSHPublicKeyId";
  @SerializedName(SERIALIZED_NAME_SS_H_PUBLIC_KEY_ID)
  @javax.annotation.Nonnull
  private String ssHPublicKeyId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusType status;

  public static final String SERIALIZED_NAME_UPLOAD_DATE = "UploadDate";
  @SerializedName(SERIALIZED_NAME_UPLOAD_DATE)
  @javax.annotation.Nonnull
  private OffsetDateTime uploadDate;

  public SSHPublicKeyMetadata() {
  }

  public SSHPublicKeyMetadata userName(@javax.annotation.Nonnull String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * The name of the IAM user associated with the SSH public key.
   * @return userName
   */
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }

  public void setUserName(@javax.annotation.Nonnull String userName) {
    this.userName = userName;
  }


  public SSHPublicKeyMetadata ssHPublicKeyId(@javax.annotation.Nonnull String ssHPublicKeyId) {
    this.ssHPublicKeyId = ssHPublicKeyId;
    return this;
  }

  /**
   * The unique identifier for the SSH public key.
   * @return ssHPublicKeyId
   */
  @javax.annotation.Nonnull
  public String getSsHPublicKeyId() {
    return ssHPublicKeyId;
  }

  public void setSsHPublicKeyId(@javax.annotation.Nonnull String ssHPublicKeyId) {
    this.ssHPublicKeyId = ssHPublicKeyId;
  }


  public SSHPublicKeyMetadata status(@javax.annotation.Nonnull StatusType status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the SSH public key. &lt;code&gt;Active&lt;/code&gt; means that the key can be used for authentication with an CodeCommit repository. &lt;code&gt;Inactive&lt;/code&gt; means that the key cannot be used.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusType getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusType status) {
    this.status = status;
  }


  public SSHPublicKeyMetadata uploadDate(@javax.annotation.Nonnull OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
    return this;
  }

  /**
   * The date and time, in &lt;a href&#x3D;\&quot;http://www.iso.org/iso/iso8601\&quot;&gt;ISO 8601 date-time format&lt;/a&gt;, when the SSH public key was uploaded.
   * @return uploadDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUploadDate() {
    return uploadDate;
  }

  public void setUploadDate(@javax.annotation.Nonnull OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSHPublicKeyMetadata ssHPublicKeyMetadata = (SSHPublicKeyMetadata) o;
    return Objects.equals(this.userName, ssHPublicKeyMetadata.userName) &&
        Objects.equals(this.ssHPublicKeyId, ssHPublicKeyMetadata.ssHPublicKeyId) &&
        Objects.equals(this.status, ssHPublicKeyMetadata.status) &&
        Objects.equals(this.uploadDate, ssHPublicKeyMetadata.uploadDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userName, ssHPublicKeyId, status, uploadDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSHPublicKeyMetadata {\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    ssHPublicKeyId: ").append(toIndentedString(ssHPublicKeyId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("UserName", "SSHPublicKeyId", "Status", "UploadDate"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("UserName", "SSHPublicKeyId", "Status", "UploadDate"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SSHPublicKeyMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SSHPublicKeyMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SSHPublicKeyMetadata is not found in the empty JSON string", SSHPublicKeyMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SSHPublicKeyMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SSHPublicKeyMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SSHPublicKeyMetadata.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("UserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserName").toString()));
      }
      if (!jsonObj.get("SSHPublicKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SSHPublicKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SSHPublicKeyId").toString()));
      }
      // validate the required field `Status`
      StatusType.validateJsonElement(jsonObj.get("Status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SSHPublicKeyMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SSHPublicKeyMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SSHPublicKeyMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SSHPublicKeyMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<SSHPublicKeyMetadata>() {
           @Override
           public void write(JsonWriter out, SSHPublicKeyMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SSHPublicKeyMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SSHPublicKeyMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SSHPublicKeyMetadata
   * @throws IOException if the JSON string is invalid with respect to SSHPublicKeyMetadata
   */
  public static SSHPublicKeyMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SSHPublicKeyMetadata.class);
  }

  /**
   * Convert an instance of SSHPublicKeyMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

