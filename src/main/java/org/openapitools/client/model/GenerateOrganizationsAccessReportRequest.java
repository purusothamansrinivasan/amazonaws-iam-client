/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GenerateOrganizationsAccessReportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GenerateOrganizationsAccessReportRequest {
  public static final String SERIALIZED_NAME_ENTITY_PATH = "EntityPath";
  @SerializedName(SERIALIZED_NAME_ENTITY_PATH)
  @javax.annotation.Nonnull
  private String entityPath;

  public static final String SERIALIZED_NAME_ORGANIZATIONS_POLICY_ID = "OrganizationsPolicyId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS_POLICY_ID)
  @javax.annotation.Nullable
  private String organizationsPolicyId;

  public GenerateOrganizationsAccessReportRequest() {
  }

  public GenerateOrganizationsAccessReportRequest entityPath(@javax.annotation.Nonnull String entityPath) {
    this.entityPath = entityPath;
    return this;
  }

  /**
   * The path of the Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is &lt;code&gt;123456789012&lt;/code&gt; and its parent OU ID is &lt;code&gt;ou-rge0-awsabcde&lt;/code&gt;. The organization root ID is &lt;code&gt;r-f6g7h8i9j0example&lt;/code&gt; and your organization ID is &lt;code&gt;o-a1b2c3d4e5&lt;/code&gt;. Your entity path is &lt;code&gt;o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012&lt;/code&gt;.
   * @return entityPath
   */
  @javax.annotation.Nonnull
  public String getEntityPath() {
    return entityPath;
  }

  public void setEntityPath(@javax.annotation.Nonnull String entityPath) {
    this.entityPath = entityPath;
  }


  public GenerateOrganizationsAccessReportRequest organizationsPolicyId(@javax.annotation.Nullable String organizationsPolicyId) {
    this.organizationsPolicyId = organizationsPolicyId;
    return this;
  }

  /**
   * &lt;p&gt;The identifier of the Organizations service control policy (SCP). This parameter is optional.&lt;/p&gt; &lt;p&gt;This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an Amazon Web Services service.&lt;/p&gt;
   * @return organizationsPolicyId
   */
  @javax.annotation.Nullable
  public String getOrganizationsPolicyId() {
    return organizationsPolicyId;
  }

  public void setOrganizationsPolicyId(@javax.annotation.Nullable String organizationsPolicyId) {
    this.organizationsPolicyId = organizationsPolicyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateOrganizationsAccessReportRequest generateOrganizationsAccessReportRequest = (GenerateOrganizationsAccessReportRequest) o;
    return Objects.equals(this.entityPath, generateOrganizationsAccessReportRequest.entityPath) &&
        Objects.equals(this.organizationsPolicyId, generateOrganizationsAccessReportRequest.organizationsPolicyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityPath, organizationsPolicyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateOrganizationsAccessReportRequest {\n");
    sb.append("    entityPath: ").append(toIndentedString(entityPath)).append("\n");
    sb.append("    organizationsPolicyId: ").append(toIndentedString(organizationsPolicyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("EntityPath", "OrganizationsPolicyId"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("EntityPath"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerateOrganizationsAccessReportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenerateOrganizationsAccessReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateOrganizationsAccessReportRequest is not found in the empty JSON string", GenerateOrganizationsAccessReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateOrganizationsAccessReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateOrganizationsAccessReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateOrganizationsAccessReportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("EntityPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntityPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EntityPath").toString()));
      }
      if ((jsonObj.get("OrganizationsPolicyId") != null && !jsonObj.get("OrganizationsPolicyId").isJsonNull()) && !jsonObj.get("OrganizationsPolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrganizationsPolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrganizationsPolicyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateOrganizationsAccessReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateOrganizationsAccessReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateOrganizationsAccessReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateOrganizationsAccessReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateOrganizationsAccessReportRequest>() {
           @Override
           public void write(JsonWriter out, GenerateOrganizationsAccessReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateOrganizationsAccessReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerateOrganizationsAccessReportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerateOrganizationsAccessReportRequest
   * @throws IOException if the JSON string is invalid with respect to GenerateOrganizationsAccessReportRequest
   */
  public static GenerateOrganizationsAccessReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateOrganizationsAccessReportRequest.class);
  }

  /**
   * Convert an instance of GenerateOrganizationsAccessReportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

