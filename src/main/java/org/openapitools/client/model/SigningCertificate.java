/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about an X.509 signing certificate.&lt;/p&gt; &lt;p&gt;This data type is used as a response element in the &lt;a&gt;UploadSigningCertificate&lt;/a&gt; and &lt;a&gt;ListSigningCertificates&lt;/a&gt; operations. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class SigningCertificate {
  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  @javax.annotation.Nonnull
  private String userName;

  public static final String SERIALIZED_NAME_CERTIFICATE_ID = "CertificateId";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ID)
  @javax.annotation.Nonnull
  private String certificateId;

  public static final String SERIALIZED_NAME_CERTIFICATE_BODY = "CertificateBody";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_BODY)
  @javax.annotation.Nonnull
  private String certificateBody;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusType status;

  public static final String SERIALIZED_NAME_UPLOAD_DATE = "UploadDate";
  @SerializedName(SERIALIZED_NAME_UPLOAD_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime uploadDate;

  public SigningCertificate() {
  }

  public SigningCertificate userName(@javax.annotation.Nonnull String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * The name of the user the signing certificate is associated with.
   * @return userName
   */
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }

  public void setUserName(@javax.annotation.Nonnull String userName) {
    this.userName = userName;
  }


  public SigningCertificate certificateId(@javax.annotation.Nonnull String certificateId) {
    this.certificateId = certificateId;
    return this;
  }

  /**
   * The ID for the signing certificate.
   * @return certificateId
   */
  @javax.annotation.Nonnull
  public String getCertificateId() {
    return certificateId;
  }

  public void setCertificateId(@javax.annotation.Nonnull String certificateId) {
    this.certificateId = certificateId;
  }


  public SigningCertificate certificateBody(@javax.annotation.Nonnull String certificateBody) {
    this.certificateBody = certificateBody;
    return this;
  }

  /**
   * The contents of the signing certificate.
   * @return certificateBody
   */
  @javax.annotation.Nonnull
  public String getCertificateBody() {
    return certificateBody;
  }

  public void setCertificateBody(@javax.annotation.Nonnull String certificateBody) {
    this.certificateBody = certificateBody;
  }


  public SigningCertificate status(@javax.annotation.Nonnull StatusType status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the signing certificate. &lt;code&gt;Active&lt;/code&gt; means that the key is valid for API calls, while &lt;code&gt;Inactive&lt;/code&gt; means it is not.
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusType getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusType status) {
    this.status = status;
  }


  public SigningCertificate uploadDate(@javax.annotation.Nullable OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
    return this;
  }

  /**
   * The date when the signing certificate was uploaded.
   * @return uploadDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUploadDate() {
    return uploadDate;
  }

  public void setUploadDate(@javax.annotation.Nullable OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SigningCertificate signingCertificate = (SigningCertificate) o;
    return Objects.equals(this.userName, signingCertificate.userName) &&
        Objects.equals(this.certificateId, signingCertificate.certificateId) &&
        Objects.equals(this.certificateBody, signingCertificate.certificateBody) &&
        Objects.equals(this.status, signingCertificate.status) &&
        Objects.equals(this.uploadDate, signingCertificate.uploadDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userName, certificateId, certificateBody, status, uploadDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SigningCertificate {\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    certificateId: ").append(toIndentedString(certificateId)).append("\n");
    sb.append("    certificateBody: ").append(toIndentedString(certificateBody)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("UserName", "CertificateId", "CertificateBody", "Status", "UploadDate"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("UserName", "CertificateId", "CertificateBody", "Status"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SigningCertificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SigningCertificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SigningCertificate is not found in the empty JSON string", SigningCertificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SigningCertificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SigningCertificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SigningCertificate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("UserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserName").toString()));
      }
      if (!jsonObj.get("CertificateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificateId").toString()));
      }
      if (!jsonObj.get("CertificateBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificateBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificateBody").toString()));
      }
      // validate the required field `Status`
      StatusType.validateJsonElement(jsonObj.get("Status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SigningCertificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SigningCertificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SigningCertificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SigningCertificate.class));

       return (TypeAdapter<T>) new TypeAdapter<SigningCertificate>() {
           @Override
           public void write(JsonWriter out, SigningCertificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SigningCertificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SigningCertificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SigningCertificate
   * @throws IOException if the JSON string is invalid with respect to SigningCertificate
   */
  public static SigningCertificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SigningCertificate.class);
  }

  /**
   * Convert an instance of SigningCertificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

