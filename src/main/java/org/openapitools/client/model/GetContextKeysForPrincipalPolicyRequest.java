/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetContextKeysForPrincipalPolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GetContextKeysForPrincipalPolicyRequest {
  public static final String SERIALIZED_NAME_POLICY_SOURCE_ARN = "PolicySourceArn";
  @SerializedName(SERIALIZED_NAME_POLICY_SOURCE_ARN)
  @javax.annotation.Nonnull
  private String policySourceArn;

  public static final String SERIALIZED_NAME_POLICY_INPUT_LIST = "PolicyInputList";
  @SerializedName(SERIALIZED_NAME_POLICY_INPUT_LIST)
  @javax.annotation.Nullable
  private List<String> policyInputList;

  public GetContextKeysForPrincipalPolicyRequest() {
  }

  public GetContextKeysForPrincipalPolicyRequest policySourceArn(@javax.annotation.Nonnull String policySourceArn) {
    this.policySourceArn = policySourceArn;
    return this;
  }

  /**
   * &lt;p&gt;The ARN of a user, group, or role whose policies contain the context keys that you want listed. If you specify a user, the list includes context keys that are found in all policies that are attached to the user. The list also includes all groups that the user is a member of. If you pick a group or a role, then it includes only those context keys that are found in policies attached to that entity. Note that all parameters are shown in unencoded form here for clarity, but must be URL encoded to be included as a part of a real HTML request.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt;
   * @return policySourceArn
   */
  @javax.annotation.Nonnull
  public String getPolicySourceArn() {
    return policySourceArn;
  }

  public void setPolicySourceArn(@javax.annotation.Nonnull String policySourceArn) {
    this.policySourceArn = policySourceArn;
  }


  public GetContextKeysForPrincipalPolicyRequest policyInputList(@javax.annotation.Nullable List<String> policyInputList) {
    this.policyInputList = policyInputList;
    return this;
  }

  public GetContextKeysForPrincipalPolicyRequest addPolicyInputListItem(String policyInputListItem) {
    if (this.policyInputList == null) {
      this.policyInputList = new ArrayList<>();
    }
    this.policyInputList.add(policyInputListItem);
    return this;
  }

  /**
   * &lt;p&gt;An optional list of additional policies for which you want the list of context keys that are referenced.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; used to validate this parameter is a string of characters consisting of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Any printable ASCII character ranging from the space character (&lt;code&gt;\\u0020&lt;/code&gt;) through the end of the ASCII character range&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The printable characters in the Basic Latin and Latin-1 Supplement character set (through &lt;code&gt;\\u00FF&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The special characters tab (&lt;code&gt;\\u0009&lt;/code&gt;), line feed (&lt;code&gt;\\u000A&lt;/code&gt;), and carriage return (&lt;code&gt;\\u000D&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return policyInputList
   */
  @javax.annotation.Nullable
  public List<String> getPolicyInputList() {
    return policyInputList;
  }

  public void setPolicyInputList(@javax.annotation.Nullable List<String> policyInputList) {
    this.policyInputList = policyInputList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetContextKeysForPrincipalPolicyRequest getContextKeysForPrincipalPolicyRequest = (GetContextKeysForPrincipalPolicyRequest) o;
    return Objects.equals(this.policySourceArn, getContextKeysForPrincipalPolicyRequest.policySourceArn) &&
        Objects.equals(this.policyInputList, getContextKeysForPrincipalPolicyRequest.policyInputList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policySourceArn, policyInputList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetContextKeysForPrincipalPolicyRequest {\n");
    sb.append("    policySourceArn: ").append(toIndentedString(policySourceArn)).append("\n");
    sb.append("    policyInputList: ").append(toIndentedString(policyInputList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("PolicySourceArn", "PolicyInputList"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("PolicySourceArn"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetContextKeysForPrincipalPolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetContextKeysForPrincipalPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetContextKeysForPrincipalPolicyRequest is not found in the empty JSON string", GetContextKeysForPrincipalPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetContextKeysForPrincipalPolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetContextKeysForPrincipalPolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetContextKeysForPrincipalPolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("PolicySourceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicySourceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicySourceArn").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PolicyInputList") != null && !jsonObj.get("PolicyInputList").isJsonNull() && !jsonObj.get("PolicyInputList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyInputList` to be an array in the JSON string but got `%s`", jsonObj.get("PolicyInputList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetContextKeysForPrincipalPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetContextKeysForPrincipalPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetContextKeysForPrincipalPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetContextKeysForPrincipalPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetContextKeysForPrincipalPolicyRequest>() {
           @Override
           public void write(JsonWriter out, GetContextKeysForPrincipalPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetContextKeysForPrincipalPolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetContextKeysForPrincipalPolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetContextKeysForPrincipalPolicyRequest
   * @throws IOException if the JSON string is invalid with respect to GetContextKeysForPrincipalPolicyRequest
   */
  public static GetContextKeysForPrincipalPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetContextKeysForPrincipalPolicyRequest.class);
  }

  /**
   * Convert an instance of GetContextKeysForPrincipalPolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

