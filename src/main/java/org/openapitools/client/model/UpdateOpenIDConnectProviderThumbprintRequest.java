/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateOpenIDConnectProviderThumbprintRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class UpdateOpenIDConnectProviderThumbprintRequest {
  public static final String SERIALIZED_NAME_OPEN_I_D_CONNECT_PROVIDER_ARN = "OpenIDConnectProviderArn";
  @SerializedName(SERIALIZED_NAME_OPEN_I_D_CONNECT_PROVIDER_ARN)
  @javax.annotation.Nonnull
  private String openIDConnectProviderArn;

  public static final String SERIALIZED_NAME_THUMBPRINT_LIST = "ThumbprintList";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT_LIST)
  @javax.annotation.Nonnull
  private List<String> thumbprintList;

  public UpdateOpenIDConnectProviderThumbprintRequest() {
  }

  public UpdateOpenIDConnectProviderThumbprintRequest openIDConnectProviderArn(@javax.annotation.Nonnull String openIDConnectProviderArn) {
    this.openIDConnectProviderArn = openIDConnectProviderArn;
    return this;
  }

  /**
   * &lt;p&gt;The Amazon Resource Name (ARN) of the IAM OIDC provider resource object for which you want to update the thumbprint. You can get a list of OIDC provider ARNs by using the &lt;a&gt;ListOpenIDConnectProviders&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt;
   * @return openIDConnectProviderArn
   */
  @javax.annotation.Nonnull
  public String getOpenIDConnectProviderArn() {
    return openIDConnectProviderArn;
  }

  public void setOpenIDConnectProviderArn(@javax.annotation.Nonnull String openIDConnectProviderArn) {
    this.openIDConnectProviderArn = openIDConnectProviderArn;
  }


  public UpdateOpenIDConnectProviderThumbprintRequest thumbprintList(@javax.annotation.Nonnull List<String> thumbprintList) {
    this.thumbprintList = thumbprintList;
    return this;
  }

  public UpdateOpenIDConnectProviderThumbprintRequest addThumbprintListItem(String thumbprintListItem) {
    if (this.thumbprintList == null) {
      this.thumbprintList = new ArrayList<>();
    }
    this.thumbprintList.add(thumbprintListItem);
    return this;
  }

  /**
   * A list of certificate thumbprints that are associated with the specified IAM OpenID Connect provider. For more information, see &lt;a&gt;CreateOpenIDConnectProvider&lt;/a&gt;. 
   * @return thumbprintList
   */
  @javax.annotation.Nonnull
  public List<String> getThumbprintList() {
    return thumbprintList;
  }

  public void setThumbprintList(@javax.annotation.Nonnull List<String> thumbprintList) {
    this.thumbprintList = thumbprintList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateOpenIDConnectProviderThumbprintRequest updateOpenIDConnectProviderThumbprintRequest = (UpdateOpenIDConnectProviderThumbprintRequest) o;
    return Objects.equals(this.openIDConnectProviderArn, updateOpenIDConnectProviderThumbprintRequest.openIDConnectProviderArn) &&
        Objects.equals(this.thumbprintList, updateOpenIDConnectProviderThumbprintRequest.thumbprintList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openIDConnectProviderArn, thumbprintList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateOpenIDConnectProviderThumbprintRequest {\n");
    sb.append("    openIDConnectProviderArn: ").append(toIndentedString(openIDConnectProviderArn)).append("\n");
    sb.append("    thumbprintList: ").append(toIndentedString(thumbprintList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("OpenIDConnectProviderArn", "ThumbprintList"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("OpenIDConnectProviderArn", "ThumbprintList"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateOpenIDConnectProviderThumbprintRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateOpenIDConnectProviderThumbprintRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateOpenIDConnectProviderThumbprintRequest is not found in the empty JSON string", UpdateOpenIDConnectProviderThumbprintRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateOpenIDConnectProviderThumbprintRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateOpenIDConnectProviderThumbprintRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateOpenIDConnectProviderThumbprintRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("OpenIDConnectProviderArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OpenIDConnectProviderArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OpenIDConnectProviderArn").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ThumbprintList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ThumbprintList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThumbprintList` to be an array in the JSON string but got `%s`", jsonObj.get("ThumbprintList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateOpenIDConnectProviderThumbprintRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateOpenIDConnectProviderThumbprintRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateOpenIDConnectProviderThumbprintRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateOpenIDConnectProviderThumbprintRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateOpenIDConnectProviderThumbprintRequest>() {
           @Override
           public void write(JsonWriter out, UpdateOpenIDConnectProviderThumbprintRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateOpenIDConnectProviderThumbprintRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateOpenIDConnectProviderThumbprintRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateOpenIDConnectProviderThumbprintRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateOpenIDConnectProviderThumbprintRequest
   */
  public static UpdateOpenIDConnectProviderThumbprintRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateOpenIDConnectProviderThumbprintRequest.class);
  }

  /**
   * Convert an instance of UpdateOpenIDConnectProviderThumbprintRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

