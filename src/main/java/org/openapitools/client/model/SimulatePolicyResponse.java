/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EvaluationResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the response to a successful &lt;a&gt;SimulatePrincipalPolicy&lt;/a&gt; or &lt;a&gt;SimulateCustomPolicy&lt;/a&gt; request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class SimulatePolicyResponse {
  public static final String SERIALIZED_NAME_EVALUATION_RESULTS = "EvaluationResults";
  @SerializedName(SERIALIZED_NAME_EVALUATION_RESULTS)
  @javax.annotation.Nullable
  private List<EvaluationResult> evaluationResults;

  public static final String SERIALIZED_NAME_IS_TRUNCATED = "IsTruncated";
  @SerializedName(SERIALIZED_NAME_IS_TRUNCATED)
  @javax.annotation.Nullable
  private Boolean isTruncated;

  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  @javax.annotation.Nullable
  private String marker;

  public SimulatePolicyResponse() {
  }

  public SimulatePolicyResponse evaluationResults(@javax.annotation.Nullable List<EvaluationResult> evaluationResults) {
    this.evaluationResults = evaluationResults;
    return this;
  }

  public SimulatePolicyResponse addEvaluationResultsItem(EvaluationResult evaluationResultsItem) {
    if (this.evaluationResults == null) {
      this.evaluationResults = new ArrayList<>();
    }
    this.evaluationResults.add(evaluationResultsItem);
    return this;
  }

  /**
   * The results of the simulation.
   * @return evaluationResults
   */
  @javax.annotation.Nullable
  public List<EvaluationResult> getEvaluationResults() {
    return evaluationResults;
  }

  public void setEvaluationResults(@javax.annotation.Nullable List<EvaluationResult> evaluationResults) {
    this.evaluationResults = evaluationResults;
  }


  public SimulatePolicyResponse isTruncated(@javax.annotation.Nullable Boolean isTruncated) {
    this.isTruncated = isTruncated;
    return this;
  }

  /**
   * A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the &lt;code&gt;Marker&lt;/code&gt; request parameter to retrieve more items. Note that IAM might return fewer than the &lt;code&gt;MaxItems&lt;/code&gt; number of results even when there are more results available. We recommend that you check &lt;code&gt;IsTruncated&lt;/code&gt; after every call to ensure that you receive all your results.
   * @return isTruncated
   */
  @javax.annotation.Nullable
  public Boolean getIsTruncated() {
    return isTruncated;
  }

  public void setIsTruncated(@javax.annotation.Nullable Boolean isTruncated) {
    this.isTruncated = isTruncated;
  }


  public SimulatePolicyResponse marker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * When &lt;code&gt;IsTruncated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this element is present and contains the value to use for the &lt;code&gt;Marker&lt;/code&gt; parameter in a subsequent pagination request.
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulatePolicyResponse simulatePolicyResponse = (SimulatePolicyResponse) o;
    return Objects.equals(this.evaluationResults, simulatePolicyResponse.evaluationResults) &&
        Objects.equals(this.isTruncated, simulatePolicyResponse.isTruncated) &&
        Objects.equals(this.marker, simulatePolicyResponse.marker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evaluationResults, isTruncated, marker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulatePolicyResponse {\n");
    sb.append("    evaluationResults: ").append(toIndentedString(evaluationResults)).append("\n");
    sb.append("    isTruncated: ").append(toIndentedString(isTruncated)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("EvaluationResults", "IsTruncated", "Marker"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimulatePolicyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimulatePolicyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimulatePolicyResponse is not found in the empty JSON string", SimulatePolicyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimulatePolicyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimulatePolicyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("EvaluationResults") != null && !jsonObj.get("EvaluationResults").isJsonNull()) {
        JsonArray jsonArrayevaluationResults = jsonObj.getAsJsonArray("EvaluationResults");
        if (jsonArrayevaluationResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EvaluationResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EvaluationResults` to be an array in the JSON string but got `%s`", jsonObj.get("EvaluationResults").toString()));
          }

          // validate the optional field `EvaluationResults` (array)
          for (int i = 0; i < jsonArrayevaluationResults.size(); i++) {
            EvaluationResult.validateJsonElement(jsonArrayevaluationResults.get(i));
          };
        }
      }
      if ((jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) && !jsonObj.get("Marker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Marker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Marker").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimulatePolicyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimulatePolicyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimulatePolicyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimulatePolicyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SimulatePolicyResponse>() {
           @Override
           public void write(JsonWriter out, SimulatePolicyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimulatePolicyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimulatePolicyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimulatePolicyResponse
   * @throws IOException if the JSON string is invalid with respect to SimulatePolicyResponse
   */
  public static SimulatePolicyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimulatePolicyResponse.class);
  }

  /**
   * Convert an instance of SimulatePolicyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

