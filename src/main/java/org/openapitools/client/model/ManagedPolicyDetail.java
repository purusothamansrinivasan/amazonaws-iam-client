/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PolicyVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about a managed policy, including the policy&#39;s ARN, versions, and the number of principal entities (users, groups, and roles) that the policy is attached to.&lt;/p&gt; &lt;p&gt;This data type is used as a response element in the &lt;a&gt;GetAccountAuthorizationDetails&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;For more information about managed policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\&quot;&gt;Managed policies and inline policies&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ManagedPolicyDetail {
  public static final String SERIALIZED_NAME_POLICY_NAME = "PolicyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  @javax.annotation.Nullable
  private String policyName;

  public static final String SERIALIZED_NAME_POLICY_ID = "PolicyId";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  @javax.annotation.Nullable
  private String policyId;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  @javax.annotation.Nullable
  private String arn;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nullable
  private String path;

  public static final String SERIALIZED_NAME_DEFAULT_VERSION_ID = "DefaultVersionId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VERSION_ID)
  @javax.annotation.Nullable
  private String defaultVersionId;

  public static final String SERIALIZED_NAME_ATTACHMENT_COUNT = "AttachmentCount";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_COUNT)
  @javax.annotation.Nullable
  private Integer attachmentCount;

  public static final String SERIALIZED_NAME_PERMISSIONS_BOUNDARY_USAGE_COUNT = "PermissionsBoundaryUsageCount";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_BOUNDARY_USAGE_COUNT)
  @javax.annotation.Nullable
  private Integer permissionsBoundaryUsageCount;

  public static final String SERIALIZED_NAME_IS_ATTACHABLE = "IsAttachable";
  @SerializedName(SERIALIZED_NAME_IS_ATTACHABLE)
  @javax.annotation.Nullable
  private Boolean isAttachable;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_UPDATE_DATE = "UpdateDate";
  @SerializedName(SERIALIZED_NAME_UPDATE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime updateDate;

  public static final String SERIALIZED_NAME_POLICY_VERSION_LIST = "PolicyVersionList";
  @SerializedName(SERIALIZED_NAME_POLICY_VERSION_LIST)
  @javax.annotation.Nullable
  private List<PolicyVersion> policyVersionList;

  public ManagedPolicyDetail() {
  }

  public ManagedPolicyDetail policyName(@javax.annotation.Nullable String policyName) {
    this.policyName = policyName;
    return this;
  }

  /**
   * The friendly name (not ARN) identifying the policy.
   * @return policyName
   */
  @javax.annotation.Nullable
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(@javax.annotation.Nullable String policyName) {
    this.policyName = policyName;
  }


  public ManagedPolicyDetail policyId(@javax.annotation.Nullable String policyId) {
    this.policyId = policyId;
    return this;
  }

  /**
   * &lt;p&gt;The stable and unique string identifying the policy.&lt;/p&gt; &lt;p&gt;For more information about IDs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;
   * @return policyId
   */
  @javax.annotation.Nullable
  public String getPolicyId() {
    return policyId;
  }

  public void setPolicyId(@javax.annotation.Nullable String policyId) {
    this.policyId = policyId;
  }


  public ManagedPolicyDetail arn(@javax.annotation.Nullable String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * &lt;p&gt;The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.&lt;/p&gt; &lt;p&gt;For more information about ARNs, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;. &lt;/p&gt;
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(@javax.annotation.Nullable String arn) {
    this.arn = arn;
  }


  public ManagedPolicyDetail path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * &lt;p&gt;The path to the policy.&lt;/p&gt; &lt;p&gt;For more information about paths, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html\&quot;&gt;IAM identifiers&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public ManagedPolicyDetail defaultVersionId(@javax.annotation.Nullable String defaultVersionId) {
    this.defaultVersionId = defaultVersionId;
    return this;
  }

  /**
   * &lt;p&gt;The identifier for the version of the policy that is set as the default (operative) version.&lt;/p&gt; &lt;p&gt;For more information about policy versions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html\&quot;&gt;Versioning for managed policies&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;
   * @return defaultVersionId
   */
  @javax.annotation.Nullable
  public String getDefaultVersionId() {
    return defaultVersionId;
  }

  public void setDefaultVersionId(@javax.annotation.Nullable String defaultVersionId) {
    this.defaultVersionId = defaultVersionId;
  }


  public ManagedPolicyDetail attachmentCount(@javax.annotation.Nullable Integer attachmentCount) {
    this.attachmentCount = attachmentCount;
    return this;
  }

  /**
   * The number of principal entities (users, groups, and roles) that the policy is attached to.
   * @return attachmentCount
   */
  @javax.annotation.Nullable
  public Integer getAttachmentCount() {
    return attachmentCount;
  }

  public void setAttachmentCount(@javax.annotation.Nullable Integer attachmentCount) {
    this.attachmentCount = attachmentCount;
  }


  public ManagedPolicyDetail permissionsBoundaryUsageCount(@javax.annotation.Nullable Integer permissionsBoundaryUsageCount) {
    this.permissionsBoundaryUsageCount = permissionsBoundaryUsageCount;
    return this;
  }

  /**
   * &lt;p&gt;The number of entities (users and roles) for which the policy is used as the permissions boundary. &lt;/p&gt; &lt;p&gt;For more information about permissions boundaries, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html\&quot;&gt;Permissions boundaries for IAM identities &lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;
   * @return permissionsBoundaryUsageCount
   */
  @javax.annotation.Nullable
  public Integer getPermissionsBoundaryUsageCount() {
    return permissionsBoundaryUsageCount;
  }

  public void setPermissionsBoundaryUsageCount(@javax.annotation.Nullable Integer permissionsBoundaryUsageCount) {
    this.permissionsBoundaryUsageCount = permissionsBoundaryUsageCount;
  }


  public ManagedPolicyDetail isAttachable(@javax.annotation.Nullable Boolean isAttachable) {
    this.isAttachable = isAttachable;
    return this;
  }

  /**
   * Specifies whether the policy can be attached to an IAM user, group, or role.
   * @return isAttachable
   */
  @javax.annotation.Nullable
  public Boolean getIsAttachable() {
    return isAttachable;
  }

  public void setIsAttachable(@javax.annotation.Nullable Boolean isAttachable) {
    this.isAttachable = isAttachable;
  }


  public ManagedPolicyDetail description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * A friendly description of the policy.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public ManagedPolicyDetail createDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * The date and time, in &lt;a href&#x3D;\&quot;http://www.iso.org/iso/iso8601\&quot;&gt;ISO 8601 date-time format&lt;/a&gt;, when the policy was created.
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public ManagedPolicyDetail updateDate(@javax.annotation.Nullable OffsetDateTime updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  /**
   * &lt;p&gt;The date and time, in &lt;a href&#x3D;\&quot;http://www.iso.org/iso/iso8601\&quot;&gt;ISO 8601 date-time format&lt;/a&gt;, when the policy was last updated.&lt;/p&gt; &lt;p&gt;When a policy has only one version, this field contains the date and time when the policy was created. When a policy has more than one version, this field contains the date and time when the most recent policy version was created.&lt;/p&gt;
   * @return updateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(@javax.annotation.Nullable OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }


  public ManagedPolicyDetail policyVersionList(@javax.annotation.Nullable List<PolicyVersion> policyVersionList) {
    this.policyVersionList = policyVersionList;
    return this;
  }

  public ManagedPolicyDetail addPolicyVersionListItem(PolicyVersion policyVersionListItem) {
    if (this.policyVersionList == null) {
      this.policyVersionList = new ArrayList<>();
    }
    this.policyVersionList.add(policyVersionListItem);
    return this;
  }

  /**
   * A list containing information about the versions of the policy.
   * @return policyVersionList
   */
  @javax.annotation.Nullable
  public List<PolicyVersion> getPolicyVersionList() {
    return policyVersionList;
  }

  public void setPolicyVersionList(@javax.annotation.Nullable List<PolicyVersion> policyVersionList) {
    this.policyVersionList = policyVersionList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedPolicyDetail managedPolicyDetail = (ManagedPolicyDetail) o;
    return Objects.equals(this.policyName, managedPolicyDetail.policyName) &&
        Objects.equals(this.policyId, managedPolicyDetail.policyId) &&
        Objects.equals(this.arn, managedPolicyDetail.arn) &&
        Objects.equals(this.path, managedPolicyDetail.path) &&
        Objects.equals(this.defaultVersionId, managedPolicyDetail.defaultVersionId) &&
        Objects.equals(this.attachmentCount, managedPolicyDetail.attachmentCount) &&
        Objects.equals(this.permissionsBoundaryUsageCount, managedPolicyDetail.permissionsBoundaryUsageCount) &&
        Objects.equals(this.isAttachable, managedPolicyDetail.isAttachable) &&
        Objects.equals(this.description, managedPolicyDetail.description) &&
        Objects.equals(this.createDate, managedPolicyDetail.createDate) &&
        Objects.equals(this.updateDate, managedPolicyDetail.updateDate) &&
        Objects.equals(this.policyVersionList, managedPolicyDetail.policyVersionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyName, policyId, arn, path, defaultVersionId, attachmentCount, permissionsBoundaryUsageCount, isAttachable, description, createDate, updateDate, policyVersionList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedPolicyDetail {\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    defaultVersionId: ").append(toIndentedString(defaultVersionId)).append("\n");
    sb.append("    attachmentCount: ").append(toIndentedString(attachmentCount)).append("\n");
    sb.append("    permissionsBoundaryUsageCount: ").append(toIndentedString(permissionsBoundaryUsageCount)).append("\n");
    sb.append("    isAttachable: ").append(toIndentedString(isAttachable)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    policyVersionList: ").append(toIndentedString(policyVersionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("PolicyName", "PolicyId", "Arn", "Path", "DefaultVersionId", "AttachmentCount", "PermissionsBoundaryUsageCount", "IsAttachable", "Description", "CreateDate", "UpdateDate", "PolicyVersionList"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedPolicyDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedPolicyDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedPolicyDetail is not found in the empty JSON string", ManagedPolicyDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedPolicyDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedPolicyDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PolicyName") != null && !jsonObj.get("PolicyName").isJsonNull()) && !jsonObj.get("PolicyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyName").toString()));
      }
      if ((jsonObj.get("PolicyId") != null && !jsonObj.get("PolicyId").isJsonNull()) && !jsonObj.get("PolicyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicyId").toString()));
      }
      if ((jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) && !jsonObj.get("Arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Arn").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("DefaultVersionId") != null && !jsonObj.get("DefaultVersionId").isJsonNull()) && !jsonObj.get("DefaultVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultVersionId").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (jsonObj.get("PolicyVersionList") != null && !jsonObj.get("PolicyVersionList").isJsonNull()) {
        JsonArray jsonArraypolicyVersionList = jsonObj.getAsJsonArray("PolicyVersionList");
        if (jsonArraypolicyVersionList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PolicyVersionList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PolicyVersionList` to be an array in the JSON string but got `%s`", jsonObj.get("PolicyVersionList").toString()));
          }

          // validate the optional field `PolicyVersionList` (array)
          for (int i = 0; i < jsonArraypolicyVersionList.size(); i++) {
            PolicyVersion.validateJsonElement(jsonArraypolicyVersionList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedPolicyDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedPolicyDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedPolicyDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedPolicyDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedPolicyDetail>() {
           @Override
           public void write(JsonWriter out, ManagedPolicyDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedPolicyDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedPolicyDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedPolicyDetail
   * @throws IOException if the JSON string is invalid with respect to ManagedPolicyDetail
   */
  public static ManagedPolicyDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedPolicyDetail.class);
  }

  /**
   * Convert an instance of ManagedPolicyDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

