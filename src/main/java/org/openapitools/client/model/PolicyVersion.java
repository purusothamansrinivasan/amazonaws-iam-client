/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about a version of a managed policy.&lt;/p&gt; &lt;p&gt;This data type is used as a response element in the &lt;a&gt;CreatePolicyVersion&lt;/a&gt;, &lt;a&gt;GetPolicyVersion&lt;/a&gt;, &lt;a&gt;ListPolicyVersions&lt;/a&gt;, and &lt;a&gt;GetAccountAuthorizationDetails&lt;/a&gt; operations. &lt;/p&gt; &lt;p&gt;For more information about managed policies, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html\&quot;&gt;Managed policies and inline policies&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class PolicyVersion {
  public static final String SERIALIZED_NAME_DOCUMENT = "Document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  @javax.annotation.Nullable
  private String document;

  public static final String SERIALIZED_NAME_VERSION_ID = "VersionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  @javax.annotation.Nullable
  private String versionId;

  public static final String SERIALIZED_NAME_IS_DEFAULT_VERSION = "IsDefaultVersion";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT_VERSION)
  @javax.annotation.Nullable
  private Boolean isDefaultVersion;

  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime createDate;

  public PolicyVersion() {
  }

  public PolicyVersion document(@javax.annotation.Nullable String document) {
    this.document = document;
    return this;
  }

  /**
   * &lt;p&gt;The policy document.&lt;/p&gt; &lt;p&gt;The policy document is returned in the response to the &lt;a&gt;GetPolicyVersion&lt;/a&gt; and &lt;a&gt;GetAccountAuthorizationDetails&lt;/a&gt; operations. It is not returned in the response to the &lt;a&gt;CreatePolicyVersion&lt;/a&gt; or &lt;a&gt;ListPolicyVersions&lt;/a&gt; operations. &lt;/p&gt; &lt;p&gt;The policy document returned in this structure is URL-encoded compliant with &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc3986\&quot;&gt;RFC 3986&lt;/a&gt;. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the &lt;code&gt;decode&lt;/code&gt; method of the &lt;code&gt;java.net.URLDecoder&lt;/code&gt; utility class in the Java SDK. Other languages and SDKs provide similar functionality.&lt;/p&gt;
   * @return document
   */
  @javax.annotation.Nullable
  public String getDocument() {
    return document;
  }

  public void setDocument(@javax.annotation.Nullable String document) {
    this.document = document;
  }


  public PolicyVersion versionId(@javax.annotation.Nullable String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * &lt;p&gt;The identifier for the policy version.&lt;/p&gt; &lt;p&gt;Policy version identifiers always begin with &lt;code&gt;v&lt;/code&gt; (always lowercase). When a policy is created, the first policy version is &lt;code&gt;v1&lt;/code&gt;. &lt;/p&gt;
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(@javax.annotation.Nullable String versionId) {
    this.versionId = versionId;
  }


  public PolicyVersion isDefaultVersion(@javax.annotation.Nullable Boolean isDefaultVersion) {
    this.isDefaultVersion = isDefaultVersion;
    return this;
  }

  /**
   * Specifies whether the policy version is set as the policy&#39;s default version.
   * @return isDefaultVersion
   */
  @javax.annotation.Nullable
  public Boolean getIsDefaultVersion() {
    return isDefaultVersion;
  }

  public void setIsDefaultVersion(@javax.annotation.Nullable Boolean isDefaultVersion) {
    this.isDefaultVersion = isDefaultVersion;
  }


  public PolicyVersion createDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * The date and time, in &lt;a href&#x3D;\&quot;http://www.iso.org/iso/iso8601\&quot;&gt;ISO 8601 date-time format&lt;/a&gt;, when the policy version was created.
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(@javax.annotation.Nullable OffsetDateTime createDate) {
    this.createDate = createDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyVersion policyVersion = (PolicyVersion) o;
    return Objects.equals(this.document, policyVersion.document) &&
        Objects.equals(this.versionId, policyVersion.versionId) &&
        Objects.equals(this.isDefaultVersion, policyVersion.isDefaultVersion) &&
        Objects.equals(this.createDate, policyVersion.createDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(document, versionId, isDefaultVersion, createDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyVersion {\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    isDefaultVersion: ").append(toIndentedString(isDefaultVersion)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Document", "VersionId", "IsDefaultVersion", "CreateDate"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyVersion is not found in the empty JSON string", PolicyVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Document") != null && !jsonObj.get("Document").isJsonNull()) && !jsonObj.get("Document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Document").toString()));
      }
      if ((jsonObj.get("VersionId") != null && !jsonObj.get("VersionId").isJsonNull()) && !jsonObj.get("VersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VersionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyVersion>() {
           @Override
           public void write(JsonWriter out, PolicyVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyVersion
   * @throws IOException if the JSON string is invalid with respect to PolicyVersion
   */
  public static PolicyVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyVersion.class);
  }

  /**
   * Convert an instance of PolicyVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

