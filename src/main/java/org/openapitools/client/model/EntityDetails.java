/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EntityInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;An object that contains details about when the IAM entities (users or roles) were last used in an attempt to access the specified Amazon Web Services service.&lt;/p&gt; &lt;p&gt;This data type is a response element in the &lt;a&gt;GetServiceLastAccessedDetailsWithEntities&lt;/a&gt; operation.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class EntityDetails {
  public static final String SERIALIZED_NAME_ENTITY_INFO = "EntityInfo";
  @SerializedName(SERIALIZED_NAME_ENTITY_INFO)
  @javax.annotation.Nonnull
  private EntityInfo entityInfo;

  public static final String SERIALIZED_NAME_LAST_AUTHENTICATED = "LastAuthenticated";
  @SerializedName(SERIALIZED_NAME_LAST_AUTHENTICATED)
  @javax.annotation.Nullable
  private OffsetDateTime lastAuthenticated;

  public EntityDetails() {
  }

  public EntityDetails entityInfo(@javax.annotation.Nonnull EntityInfo entityInfo) {
    this.entityInfo = entityInfo;
    return this;
  }

  /**
   * The &lt;code&gt;EntityInfo&lt;/code&gt; object that contains details about the entity (user or role).
   * @return entityInfo
   */
  @javax.annotation.Nonnull
  public EntityInfo getEntityInfo() {
    return entityInfo;
  }

  public void setEntityInfo(@javax.annotation.Nonnull EntityInfo entityInfo) {
    this.entityInfo = entityInfo;
  }


  public EntityDetails lastAuthenticated(@javax.annotation.Nullable OffsetDateTime lastAuthenticated) {
    this.lastAuthenticated = lastAuthenticated;
    return this;
  }

  /**
   * &lt;p&gt;The date and time, in &lt;a href&#x3D;\&quot;http://www.iso.org/iso/iso8601\&quot;&gt;ISO 8601 date-time format&lt;/a&gt;, when the authenticated entity last attempted to access Amazon Web Services. Amazon Web Services does not report unauthenticated requests.&lt;/p&gt; &lt;p&gt;This field is null if no IAM entities attempted to access the service within the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period\&quot;&gt;tracking period&lt;/a&gt;.&lt;/p&gt;
   * @return lastAuthenticated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAuthenticated() {
    return lastAuthenticated;
  }

  public void setLastAuthenticated(@javax.annotation.Nullable OffsetDateTime lastAuthenticated) {
    this.lastAuthenticated = lastAuthenticated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityDetails entityDetails = (EntityDetails) o;
    return Objects.equals(this.entityInfo, entityDetails.entityInfo) &&
        Objects.equals(this.lastAuthenticated, entityDetails.lastAuthenticated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityInfo, lastAuthenticated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityDetails {\n");
    sb.append("    entityInfo: ").append(toIndentedString(entityInfo)).append("\n");
    sb.append("    lastAuthenticated: ").append(toIndentedString(lastAuthenticated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("EntityInfo", "LastAuthenticated"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("EntityInfo"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityDetails is not found in the empty JSON string", EntityDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EntityDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EntityInfo`
      EntityInfo.validateJsonElement(jsonObj.get("EntityInfo"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityDetails>() {
           @Override
           public void write(JsonWriter out, EntityDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityDetails
   * @throws IOException if the JSON string is invalid with respect to EntityDetails
   */
  public static EntityDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityDetails.class);
  }

  /**
   * Convert an instance of EntityDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

