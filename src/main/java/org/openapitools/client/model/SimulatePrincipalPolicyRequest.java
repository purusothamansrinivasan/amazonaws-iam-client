/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContextEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimulatePrincipalPolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class SimulatePrincipalPolicyRequest {
  public static final String SERIALIZED_NAME_POLICY_SOURCE_ARN = "PolicySourceArn";
  @SerializedName(SERIALIZED_NAME_POLICY_SOURCE_ARN)
  @javax.annotation.Nonnull
  private String policySourceArn;

  public static final String SERIALIZED_NAME_POLICY_INPUT_LIST = "PolicyInputList";
  @SerializedName(SERIALIZED_NAME_POLICY_INPUT_LIST)
  @javax.annotation.Nullable
  private List<String> policyInputList;

  public static final String SERIALIZED_NAME_PERMISSIONS_BOUNDARY_POLICY_INPUT_LIST = "PermissionsBoundaryPolicyInputList";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_BOUNDARY_POLICY_INPUT_LIST)
  @javax.annotation.Nullable
  private List<String> permissionsBoundaryPolicyInputList;

  public static final String SERIALIZED_NAME_ACTION_NAMES = "ActionNames";
  @SerializedName(SERIALIZED_NAME_ACTION_NAMES)
  @javax.annotation.Nonnull
  private List<String> actionNames;

  public static final String SERIALIZED_NAME_RESOURCE_ARNS = "ResourceArns";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARNS)
  @javax.annotation.Nullable
  private List<String> resourceArns;

  public static final String SERIALIZED_NAME_RESOURCE_POLICY = "ResourcePolicy";
  @SerializedName(SERIALIZED_NAME_RESOURCE_POLICY)
  @javax.annotation.Nullable
  private String resourcePolicy;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER = "ResourceOwner";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER)
  @javax.annotation.Nullable
  private String resourceOwner;

  public static final String SERIALIZED_NAME_CALLER_ARN = "CallerArn";
  @SerializedName(SERIALIZED_NAME_CALLER_ARN)
  @javax.annotation.Nullable
  private String callerArn;

  public static final String SERIALIZED_NAME_CONTEXT_ENTRIES = "ContextEntries";
  @SerializedName(SERIALIZED_NAME_CONTEXT_ENTRIES)
  @javax.annotation.Nullable
  private List<ContextEntry> contextEntries;

  public static final String SERIALIZED_NAME_RESOURCE_HANDLING_OPTION = "ResourceHandlingOption";
  @SerializedName(SERIALIZED_NAME_RESOURCE_HANDLING_OPTION)
  @javax.annotation.Nullable
  private String resourceHandlingOption;

  public static final String SERIALIZED_NAME_MAX_ITEMS = "MaxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  @javax.annotation.Nullable
  private Integer maxItems;

  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  @javax.annotation.Nullable
  private String marker;

  public SimulatePrincipalPolicyRequest() {
  }

  public SimulatePrincipalPolicyRequest policySourceArn(@javax.annotation.Nonnull String policySourceArn) {
    this.policySourceArn = policySourceArn;
    return this;
  }

  /**
   * &lt;p&gt;The Amazon Resource Name (ARN) of a user, group, or role whose policies you want to include in the simulation. If you specify a user, group, or role, the simulation includes all policies that are associated with that entity. If you specify a user, the simulation also includes all policies that are attached to any groups the user belongs to.&lt;/p&gt; &lt;p&gt;The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length\&quot;&gt;IAM and STS character quotas&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt;
   * @return policySourceArn
   */
  @javax.annotation.Nonnull
  public String getPolicySourceArn() {
    return policySourceArn;
  }

  public void setPolicySourceArn(@javax.annotation.Nonnull String policySourceArn) {
    this.policySourceArn = policySourceArn;
  }


  public SimulatePrincipalPolicyRequest policyInputList(@javax.annotation.Nullable List<String> policyInputList) {
    this.policyInputList = policyInputList;
    return this;
  }

  public SimulatePrincipalPolicyRequest addPolicyInputListItem(String policyInputListItem) {
    if (this.policyInputList == null) {
      this.policyInputList = new ArrayList<>();
    }
    this.policyInputList.add(policyInputListItem);
    return this;
  }

  /**
   * &lt;p&gt;An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; used to validate this parameter is a string of characters consisting of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Any printable ASCII character ranging from the space character (&lt;code&gt;\\u0020&lt;/code&gt;) through the end of the ASCII character range&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The printable characters in the Basic Latin and Latin-1 Supplement character set (through &lt;code&gt;\\u00FF&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The special characters tab (&lt;code&gt;\\u0009&lt;/code&gt;), line feed (&lt;code&gt;\\u000A&lt;/code&gt;), and carriage return (&lt;code&gt;\\u000D&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return policyInputList
   */
  @javax.annotation.Nullable
  public List<String> getPolicyInputList() {
    return policyInputList;
  }

  public void setPolicyInputList(@javax.annotation.Nullable List<String> policyInputList) {
    this.policyInputList = policyInputList;
  }


  public SimulatePrincipalPolicyRequest permissionsBoundaryPolicyInputList(@javax.annotation.Nullable List<String> permissionsBoundaryPolicyInputList) {
    this.permissionsBoundaryPolicyInputList = permissionsBoundaryPolicyInputList;
    return this;
  }

  public SimulatePrincipalPolicyRequest addPermissionsBoundaryPolicyInputListItem(String permissionsBoundaryPolicyInputListItem) {
    if (this.permissionsBoundaryPolicyInputList == null) {
      this.permissionsBoundaryPolicyInputList = new ArrayList<>();
    }
    this.permissionsBoundaryPolicyInputList.add(permissionsBoundaryPolicyInputListItem);
    return this;
  }

  /**
   * &lt;p&gt;The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permissions boundary policy is used for the simulation. For more information about permissions boundaries, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html\&quot;&gt;Permissions boundaries for IAM entities&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.&lt;/p&gt; &lt;p&gt;The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length\&quot;&gt;IAM and STS character quotas&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; used to validate this parameter is a string of characters consisting of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Any printable ASCII character ranging from the space character (&lt;code&gt;\\u0020&lt;/code&gt;) through the end of the ASCII character range&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The printable characters in the Basic Latin and Latin-1 Supplement character set (through &lt;code&gt;\\u00FF&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The special characters tab (&lt;code&gt;\\u0009&lt;/code&gt;), line feed (&lt;code&gt;\\u000A&lt;/code&gt;), and carriage return (&lt;code&gt;\\u000D&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return permissionsBoundaryPolicyInputList
   */
  @javax.annotation.Nullable
  public List<String> getPermissionsBoundaryPolicyInputList() {
    return permissionsBoundaryPolicyInputList;
  }

  public void setPermissionsBoundaryPolicyInputList(@javax.annotation.Nullable List<String> permissionsBoundaryPolicyInputList) {
    this.permissionsBoundaryPolicyInputList = permissionsBoundaryPolicyInputList;
  }


  public SimulatePrincipalPolicyRequest actionNames(@javax.annotation.Nonnull List<String> actionNames) {
    this.actionNames = actionNames;
    return this;
  }

  public SimulatePrincipalPolicyRequest addActionNamesItem(String actionNamesItem) {
    if (this.actionNames == null) {
      this.actionNames = new ArrayList<>();
    }
    this.actionNames.add(actionNamesItem);
    return this;
  }

  /**
   * A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as &lt;code&gt;iam:CreateUser&lt;/code&gt;.
   * @return actionNames
   */
  @javax.annotation.Nonnull
  public List<String> getActionNames() {
    return actionNames;
  }

  public void setActionNames(@javax.annotation.Nonnull List<String> actionNames) {
    this.actionNames = actionNames;
  }


  public SimulatePrincipalPolicyRequest resourceArns(@javax.annotation.Nullable List<String> resourceArns) {
    this.resourceArns = resourceArns;
    return this;
  }

  public SimulatePrincipalPolicyRequest addResourceArnsItem(String resourceArnsItem) {
    if (this.resourceArns == null) {
      this.resourceArns = new ArrayList<>();
    }
    this.resourceArns.add(resourceArnsItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of ARNs of Amazon Web Services resources to include in the simulation. If this parameter is not provided, then the value defaults to &lt;code&gt;*&lt;/code&gt; (all resources). Each API in the &lt;code&gt;ActionNames&lt;/code&gt; parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response. You can simulate resources that don&#39;t exist in your account.&lt;/p&gt; &lt;p&gt;The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the &lt;code&gt;ResourcePolicy&lt;/code&gt; parameter.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Simulation of resource-based policies isn&#39;t supported for IAM roles.&lt;/p&gt; &lt;/note&gt;
   * @return resourceArns
   */
  @javax.annotation.Nullable
  public List<String> getResourceArns() {
    return resourceArns;
  }

  public void setResourceArns(@javax.annotation.Nullable List<String> resourceArns) {
    this.resourceArns = resourceArns;
  }


  public SimulatePrincipalPolicyRequest resourcePolicy(@javax.annotation.Nullable String resourcePolicy) {
    this.resourcePolicy = resourcePolicy;
    return this;
  }

  /**
   * &lt;p&gt;A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.&lt;/p&gt; &lt;p&gt;The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length\&quot;&gt;IAM and STS character quotas&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt; used to validate this parameter is a string of characters consisting of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Any printable ASCII character ranging from the space character (&lt;code&gt;\\u0020&lt;/code&gt;) through the end of the ASCII character range&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The printable characters in the Basic Latin and Latin-1 Supplement character set (through &lt;code&gt;\\u00FF&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The special characters tab (&lt;code&gt;\\u0009&lt;/code&gt;), line feed (&lt;code&gt;\\u000A&lt;/code&gt;), and carriage return (&lt;code&gt;\\u000D&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Simulation of resource-based policies isn&#39;t supported for IAM roles.&lt;/p&gt; &lt;/note&gt;
   * @return resourcePolicy
   */
  @javax.annotation.Nullable
  public String getResourcePolicy() {
    return resourcePolicy;
  }

  public void setResourcePolicy(@javax.annotation.Nullable String resourcePolicy) {
    this.resourcePolicy = resourcePolicy;
  }


  public SimulatePrincipalPolicyRequest resourceOwner(@javax.annotation.Nullable String resourceOwner) {
    this.resourceOwner = resourceOwner;
    return this;
  }

  /**
   * An Amazon Web Services account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If &lt;code&gt;ResourceOwner&lt;/code&gt; is specified, it is also used as the account owner of any &lt;code&gt;ResourcePolicy&lt;/code&gt; included in the simulation. If the &lt;code&gt;ResourceOwner&lt;/code&gt; parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in &lt;code&gt;CallerArn&lt;/code&gt;. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user &lt;code&gt;CallerArn&lt;/code&gt;.
   * @return resourceOwner
   */
  @javax.annotation.Nullable
  public String getResourceOwner() {
    return resourceOwner;
  }

  public void setResourceOwner(@javax.annotation.Nullable String resourceOwner) {
    this.resourceOwner = resourceOwner;
  }


  public SimulatePrincipalPolicyRequest callerArn(@javax.annotation.Nullable String callerArn) {
    this.callerArn = callerArn;
    return this;
  }

  /**
   * &lt;p&gt;The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a &lt;code&gt;CallerArn&lt;/code&gt;, it defaults to the ARN of the user that you specify in &lt;code&gt;PolicySourceArn&lt;/code&gt;, if you specified a user. If you include both a &lt;code&gt;PolicySourceArn&lt;/code&gt; (for example, &lt;code&gt;arn:aws:iam::123456789012:user/David&lt;/code&gt;) and a &lt;code&gt;CallerArn&lt;/code&gt; (for example, &lt;code&gt;arn:aws:iam::123456789012:user/Bob&lt;/code&gt;), the result is that you simulate calling the API operations as Bob, as if Bob had David&#39;s policies.&lt;/p&gt; &lt;p&gt;You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CallerArn&lt;/code&gt; is required if you include a &lt;code&gt;ResourcePolicy&lt;/code&gt; and the &lt;code&gt;PolicySourceArn&lt;/code&gt; is not the ARN for an IAM user. This is required so that the resource-based policy&#39;s &lt;code&gt;Principal&lt;/code&gt; element has a value to use in evaluating the policy.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt;
   * @return callerArn
   */
  @javax.annotation.Nullable
  public String getCallerArn() {
    return callerArn;
  }

  public void setCallerArn(@javax.annotation.Nullable String callerArn) {
    this.callerArn = callerArn;
  }


  public SimulatePrincipalPolicyRequest contextEntries(@javax.annotation.Nullable List<ContextEntry> contextEntries) {
    this.contextEntries = contextEntries;
    return this;
  }

  public SimulatePrincipalPolicyRequest addContextEntriesItem(ContextEntry contextEntriesItem) {
    if (this.contextEntries == null) {
      this.contextEntries = new ArrayList<>();
    }
    this.contextEntries.add(contextEntriesItem);
    return this;
  }

  /**
   * A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.
   * @return contextEntries
   */
  @javax.annotation.Nullable
  public List<ContextEntry> getContextEntries() {
    return contextEntries;
  }

  public void setContextEntries(@javax.annotation.Nullable List<ContextEntry> contextEntries) {
    this.contextEntries = contextEntries;
  }


  public SimulatePrincipalPolicyRequest resourceHandlingOption(@javax.annotation.Nullable String resourceHandlingOption) {
    this.resourceHandlingOption = resourceHandlingOption;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.&lt;/p&gt; &lt;p&gt;Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html\&quot;&gt;Supported platforms&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide&lt;/i&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;EC2-VPC-InstanceStore&lt;/b&gt; &lt;/p&gt; &lt;p&gt;instance, image, security group, network interface&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;EC2-VPC-InstanceStore-Subnet&lt;/b&gt; &lt;/p&gt; &lt;p&gt;instance, image, security group, network interface, subnet&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;EC2-VPC-EBS&lt;/b&gt; &lt;/p&gt; &lt;p&gt;instance, image, security group, network interface, volume&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;EC2-VPC-EBS-Subnet&lt;/b&gt; &lt;/p&gt; &lt;p&gt;instance, image, security group, network interface, subnet, volume&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return resourceHandlingOption
   */
  @javax.annotation.Nullable
  public String getResourceHandlingOption() {
    return resourceHandlingOption;
  }

  public void setResourceHandlingOption(@javax.annotation.Nullable String resourceHandlingOption) {
    this.resourceHandlingOption = resourceHandlingOption;
  }


  public SimulatePrincipalPolicyRequest maxItems(@javax.annotation.Nullable Integer maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * &lt;p&gt;Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the &lt;code&gt;IsTruncated&lt;/code&gt; response element is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the &lt;code&gt;IsTruncated&lt;/code&gt; response element returns &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;Marker&lt;/code&gt; contains a value to include in the subsequent call that tells the service where to continue from.&lt;/p&gt;
   * minimum: 1
   * maximum: 1000
   * @return maxItems
   */
  @javax.annotation.Nullable
  public Integer getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(@javax.annotation.Nullable Integer maxItems) {
    this.maxItems = maxItems;
  }


  public SimulatePrincipalPolicyRequest marker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the &lt;code&gt;Marker&lt;/code&gt; element in the response that you received to indicate where the next call should start.
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulatePrincipalPolicyRequest simulatePrincipalPolicyRequest = (SimulatePrincipalPolicyRequest) o;
    return Objects.equals(this.policySourceArn, simulatePrincipalPolicyRequest.policySourceArn) &&
        Objects.equals(this.policyInputList, simulatePrincipalPolicyRequest.policyInputList) &&
        Objects.equals(this.permissionsBoundaryPolicyInputList, simulatePrincipalPolicyRequest.permissionsBoundaryPolicyInputList) &&
        Objects.equals(this.actionNames, simulatePrincipalPolicyRequest.actionNames) &&
        Objects.equals(this.resourceArns, simulatePrincipalPolicyRequest.resourceArns) &&
        Objects.equals(this.resourcePolicy, simulatePrincipalPolicyRequest.resourcePolicy) &&
        Objects.equals(this.resourceOwner, simulatePrincipalPolicyRequest.resourceOwner) &&
        Objects.equals(this.callerArn, simulatePrincipalPolicyRequest.callerArn) &&
        Objects.equals(this.contextEntries, simulatePrincipalPolicyRequest.contextEntries) &&
        Objects.equals(this.resourceHandlingOption, simulatePrincipalPolicyRequest.resourceHandlingOption) &&
        Objects.equals(this.maxItems, simulatePrincipalPolicyRequest.maxItems) &&
        Objects.equals(this.marker, simulatePrincipalPolicyRequest.marker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policySourceArn, policyInputList, permissionsBoundaryPolicyInputList, actionNames, resourceArns, resourcePolicy, resourceOwner, callerArn, contextEntries, resourceHandlingOption, maxItems, marker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulatePrincipalPolicyRequest {\n");
    sb.append("    policySourceArn: ").append(toIndentedString(policySourceArn)).append("\n");
    sb.append("    policyInputList: ").append(toIndentedString(policyInputList)).append("\n");
    sb.append("    permissionsBoundaryPolicyInputList: ").append(toIndentedString(permissionsBoundaryPolicyInputList)).append("\n");
    sb.append("    actionNames: ").append(toIndentedString(actionNames)).append("\n");
    sb.append("    resourceArns: ").append(toIndentedString(resourceArns)).append("\n");
    sb.append("    resourcePolicy: ").append(toIndentedString(resourcePolicy)).append("\n");
    sb.append("    resourceOwner: ").append(toIndentedString(resourceOwner)).append("\n");
    sb.append("    callerArn: ").append(toIndentedString(callerArn)).append("\n");
    sb.append("    contextEntries: ").append(toIndentedString(contextEntries)).append("\n");
    sb.append("    resourceHandlingOption: ").append(toIndentedString(resourceHandlingOption)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("PolicySourceArn", "PolicyInputList", "PermissionsBoundaryPolicyInputList", "ActionNames", "ResourceArns", "ResourcePolicy", "ResourceOwner", "CallerArn", "ContextEntries", "ResourceHandlingOption", "MaxItems", "Marker"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("PolicySourceArn", "ActionNames"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimulatePrincipalPolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimulatePrincipalPolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimulatePrincipalPolicyRequest is not found in the empty JSON string", SimulatePrincipalPolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimulatePrincipalPolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimulatePrincipalPolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimulatePrincipalPolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("PolicySourceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicySourceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PolicySourceArn").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PolicyInputList") != null && !jsonObj.get("PolicyInputList").isJsonNull() && !jsonObj.get("PolicyInputList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PolicyInputList` to be an array in the JSON string but got `%s`", jsonObj.get("PolicyInputList").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PermissionsBoundaryPolicyInputList") != null && !jsonObj.get("PermissionsBoundaryPolicyInputList").isJsonNull() && !jsonObj.get("PermissionsBoundaryPolicyInputList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermissionsBoundaryPolicyInputList` to be an array in the JSON string but got `%s`", jsonObj.get("PermissionsBoundaryPolicyInputList").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ActionNames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ActionNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActionNames` to be an array in the JSON string but got `%s`", jsonObj.get("ActionNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ResourceArns") != null && !jsonObj.get("ResourceArns").isJsonNull() && !jsonObj.get("ResourceArns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceArns` to be an array in the JSON string but got `%s`", jsonObj.get("ResourceArns").toString()));
      }
      if ((jsonObj.get("ResourcePolicy") != null && !jsonObj.get("ResourcePolicy").isJsonNull()) && !jsonObj.get("ResourcePolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourcePolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourcePolicy").toString()));
      }
      if ((jsonObj.get("ResourceOwner") != null && !jsonObj.get("ResourceOwner").isJsonNull()) && !jsonObj.get("ResourceOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceOwner").toString()));
      }
      if ((jsonObj.get("CallerArn") != null && !jsonObj.get("CallerArn").isJsonNull()) && !jsonObj.get("CallerArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallerArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallerArn").toString()));
      }
      if (jsonObj.get("ContextEntries") != null && !jsonObj.get("ContextEntries").isJsonNull()) {
        JsonArray jsonArraycontextEntries = jsonObj.getAsJsonArray("ContextEntries");
        if (jsonArraycontextEntries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ContextEntries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ContextEntries` to be an array in the JSON string but got `%s`", jsonObj.get("ContextEntries").toString()));
          }

          // validate the optional field `ContextEntries` (array)
          for (int i = 0; i < jsonArraycontextEntries.size(); i++) {
            ContextEntry.validateJsonElement(jsonArraycontextEntries.get(i));
          };
        }
      }
      if ((jsonObj.get("ResourceHandlingOption") != null && !jsonObj.get("ResourceHandlingOption").isJsonNull()) && !jsonObj.get("ResourceHandlingOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceHandlingOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceHandlingOption").toString()));
      }
      if ((jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) && !jsonObj.get("Marker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Marker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Marker").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimulatePrincipalPolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimulatePrincipalPolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimulatePrincipalPolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimulatePrincipalPolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SimulatePrincipalPolicyRequest>() {
           @Override
           public void write(JsonWriter out, SimulatePrincipalPolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimulatePrincipalPolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimulatePrincipalPolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimulatePrincipalPolicyRequest
   * @throws IOException if the JSON string is invalid with respect to SimulatePrincipalPolicyRequest
   */
  public static SimulatePrincipalPolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimulatePrincipalPolicyRequest.class);
  }

  /**
   * Convert an instance of SimulatePrincipalPolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

