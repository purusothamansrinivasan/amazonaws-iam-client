/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PolicyGrantingServiceAccess;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains details about the permissions policies that are attached to the specified identity (user, group, or role).&lt;/p&gt; &lt;p&gt;This data type is used as a response element in the &lt;a&gt;ListPoliciesGrantingServiceAccess&lt;/a&gt; operation.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ListPoliciesGrantingServiceAccessEntry {
  public static final String SERIALIZED_NAME_SERVICE_NAMESPACE = "ServiceNamespace";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAMESPACE)
  @javax.annotation.Nullable
  private String serviceNamespace;

  public static final String SERIALIZED_NAME_POLICIES = "Policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  @javax.annotation.Nullable
  private List<PolicyGrantingServiceAccess> policies;

  public ListPoliciesGrantingServiceAccessEntry() {
  }

  public ListPoliciesGrantingServiceAccessEntry serviceNamespace(@javax.annotation.Nullable String serviceNamespace) {
    this.serviceNamespace = serviceNamespace;
    return this;
  }

  /**
   * &lt;p&gt;The namespace of the service that was accessed.&lt;/p&gt; &lt;p&gt;To learn the service namespace of a service, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html\&quot;&gt;Actions, resources, and condition keys for Amazon Web Services services&lt;/a&gt; in the &lt;i&gt;Service Authorization Reference&lt;/i&gt;. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, &lt;code&gt;(service prefix: a4b)&lt;/code&gt;. For more information about service namespaces, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces\&quot;&gt;Amazon Web Services service namespaces&lt;/a&gt; in the &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt;
   * @return serviceNamespace
   */
  @javax.annotation.Nullable
  public String getServiceNamespace() {
    return serviceNamespace;
  }

  public void setServiceNamespace(@javax.annotation.Nullable String serviceNamespace) {
    this.serviceNamespace = serviceNamespace;
  }


  public ListPoliciesGrantingServiceAccessEntry policies(@javax.annotation.Nullable List<PolicyGrantingServiceAccess> policies) {
    this.policies = policies;
    return this;
  }

  public ListPoliciesGrantingServiceAccessEntry addPoliciesItem(PolicyGrantingServiceAccess policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

  /**
   * The &lt;code&gt;PoliciesGrantingServiceAccess&lt;/code&gt; object that contains details about the policy.
   * @return policies
   */
  @javax.annotation.Nullable
  public List<PolicyGrantingServiceAccess> getPolicies() {
    return policies;
  }

  public void setPolicies(@javax.annotation.Nullable List<PolicyGrantingServiceAccess> policies) {
    this.policies = policies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPoliciesGrantingServiceAccessEntry listPoliciesGrantingServiceAccessEntry = (ListPoliciesGrantingServiceAccessEntry) o;
    return Objects.equals(this.serviceNamespace, listPoliciesGrantingServiceAccessEntry.serviceNamespace) &&
        Objects.equals(this.policies, listPoliciesGrantingServiceAccessEntry.policies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceNamespace, policies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPoliciesGrantingServiceAccessEntry {\n");
    sb.append("    serviceNamespace: ").append(toIndentedString(serviceNamespace)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ServiceNamespace", "Policies"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPoliciesGrantingServiceAccessEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPoliciesGrantingServiceAccessEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPoliciesGrantingServiceAccessEntry is not found in the empty JSON string", ListPoliciesGrantingServiceAccessEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPoliciesGrantingServiceAccessEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPoliciesGrantingServiceAccessEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ServiceNamespace") != null && !jsonObj.get("ServiceNamespace").isJsonNull()) && !jsonObj.get("ServiceNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceNamespace").toString()));
      }
      if (jsonObj.get("Policies") != null && !jsonObj.get("Policies").isJsonNull()) {
        JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("Policies");
        if (jsonArraypolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Policies` to be an array in the JSON string but got `%s`", jsonObj.get("Policies").toString()));
          }

          // validate the optional field `Policies` (array)
          for (int i = 0; i < jsonArraypolicies.size(); i++) {
            PolicyGrantingServiceAccess.validateJsonElement(jsonArraypolicies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPoliciesGrantingServiceAccessEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPoliciesGrantingServiceAccessEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPoliciesGrantingServiceAccessEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPoliciesGrantingServiceAccessEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPoliciesGrantingServiceAccessEntry>() {
           @Override
           public void write(JsonWriter out, ListPoliciesGrantingServiceAccessEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPoliciesGrantingServiceAccessEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPoliciesGrantingServiceAccessEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPoliciesGrantingServiceAccessEntry
   * @throws IOException if the JSON string is invalid with respect to ListPoliciesGrantingServiceAccessEntry
   */
  public static ListPoliciesGrantingServiceAccessEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPoliciesGrantingServiceAccessEntry.class);
  }

  /**
   * Convert an instance of ListPoliciesGrantingServiceAccessEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

