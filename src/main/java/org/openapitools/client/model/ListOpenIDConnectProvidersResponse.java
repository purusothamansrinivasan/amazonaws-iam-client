/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OpenIDConnectProviderListEntry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the response to a successful &lt;a&gt;ListOpenIDConnectProviders&lt;/a&gt; request. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ListOpenIDConnectProvidersResponse {
  public static final String SERIALIZED_NAME_OPEN_I_D_CONNECT_PROVIDER_LIST = "OpenIDConnectProviderList";
  @SerializedName(SERIALIZED_NAME_OPEN_I_D_CONNECT_PROVIDER_LIST)
  @javax.annotation.Nullable
  private List<OpenIDConnectProviderListEntry> openIDConnectProviderList;

  public ListOpenIDConnectProvidersResponse() {
  }

  public ListOpenIDConnectProvidersResponse openIDConnectProviderList(@javax.annotation.Nullable List<OpenIDConnectProviderListEntry> openIDConnectProviderList) {
    this.openIDConnectProviderList = openIDConnectProviderList;
    return this;
  }

  public ListOpenIDConnectProvidersResponse addOpenIDConnectProviderListItem(OpenIDConnectProviderListEntry openIDConnectProviderListItem) {
    if (this.openIDConnectProviderList == null) {
      this.openIDConnectProviderList = new ArrayList<>();
    }
    this.openIDConnectProviderList.add(openIDConnectProviderListItem);
    return this;
  }

  /**
   * The list of IAM OIDC provider resource objects defined in the Amazon Web Services account.
   * @return openIDConnectProviderList
   */
  @javax.annotation.Nullable
  public List<OpenIDConnectProviderListEntry> getOpenIDConnectProviderList() {
    return openIDConnectProviderList;
  }

  public void setOpenIDConnectProviderList(@javax.annotation.Nullable List<OpenIDConnectProviderListEntry> openIDConnectProviderList) {
    this.openIDConnectProviderList = openIDConnectProviderList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListOpenIDConnectProvidersResponse listOpenIDConnectProvidersResponse = (ListOpenIDConnectProvidersResponse) o;
    return Objects.equals(this.openIDConnectProviderList, listOpenIDConnectProvidersResponse.openIDConnectProviderList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openIDConnectProviderList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListOpenIDConnectProvidersResponse {\n");
    sb.append("    openIDConnectProviderList: ").append(toIndentedString(openIDConnectProviderList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("OpenIDConnectProviderList"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListOpenIDConnectProvidersResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListOpenIDConnectProvidersResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListOpenIDConnectProvidersResponse is not found in the empty JSON string", ListOpenIDConnectProvidersResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListOpenIDConnectProvidersResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListOpenIDConnectProvidersResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("OpenIDConnectProviderList") != null && !jsonObj.get("OpenIDConnectProviderList").isJsonNull()) {
        JsonArray jsonArrayopenIDConnectProviderList = jsonObj.getAsJsonArray("OpenIDConnectProviderList");
        if (jsonArrayopenIDConnectProviderList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OpenIDConnectProviderList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OpenIDConnectProviderList` to be an array in the JSON string but got `%s`", jsonObj.get("OpenIDConnectProviderList").toString()));
          }

          // validate the optional field `OpenIDConnectProviderList` (array)
          for (int i = 0; i < jsonArrayopenIDConnectProviderList.size(); i++) {
            OpenIDConnectProviderListEntry.validateJsonElement(jsonArrayopenIDConnectProviderList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListOpenIDConnectProvidersResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListOpenIDConnectProvidersResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListOpenIDConnectProvidersResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListOpenIDConnectProvidersResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListOpenIDConnectProvidersResponse>() {
           @Override
           public void write(JsonWriter out, ListOpenIDConnectProvidersResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListOpenIDConnectProvidersResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListOpenIDConnectProvidersResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListOpenIDConnectProvidersResponse
   * @throws IOException if the JSON string is invalid with respect to ListOpenIDConnectProvidersResponse
   */
  public static ListOpenIDConnectProvidersResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListOpenIDConnectProvidersResponse.class);
  }

  /**
   * Convert an instance of ListOpenIDConnectProvidersResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

