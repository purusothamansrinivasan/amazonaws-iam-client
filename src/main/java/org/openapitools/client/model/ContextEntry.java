/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContextKeyTypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains information about a condition context key. It includes the name of the key and specifies the value (or values, if the context key supports multiple values) to use in the simulation. This information is used when evaluating the &lt;code&gt;Condition&lt;/code&gt; elements of the input policies.&lt;/p&gt; &lt;p&gt;This data type is used as an input parameter to &lt;a&gt;SimulateCustomPolicy&lt;/a&gt; and &lt;a&gt;SimulatePrincipalPolicy&lt;/a&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ContextEntry {
  public static final String SERIALIZED_NAME_CONTEXT_KEY_NAME = "ContextKeyName";
  @SerializedName(SERIALIZED_NAME_CONTEXT_KEY_NAME)
  @javax.annotation.Nullable
  private String contextKeyName;

  public static final String SERIALIZED_NAME_CONTEXT_KEY_VALUES = "ContextKeyValues";
  @SerializedName(SERIALIZED_NAME_CONTEXT_KEY_VALUES)
  @javax.annotation.Nullable
  private List<String> contextKeyValues;

  public static final String SERIALIZED_NAME_CONTEXT_KEY_TYPE = "ContextKeyType";
  @SerializedName(SERIALIZED_NAME_CONTEXT_KEY_TYPE)
  @javax.annotation.Nullable
  private ContextKeyTypeEnum contextKeyType;

  public ContextEntry() {
  }

  public ContextEntry contextKeyName(@javax.annotation.Nullable String contextKeyName) {
    this.contextKeyName = contextKeyName;
    return this;
  }

  /**
   * The full name of a condition context key, including the service prefix. For example, &lt;code&gt;aws:SourceIp&lt;/code&gt; or &lt;code&gt;s3:VersionId&lt;/code&gt;.
   * @return contextKeyName
   */
  @javax.annotation.Nullable
  public String getContextKeyName() {
    return contextKeyName;
  }

  public void setContextKeyName(@javax.annotation.Nullable String contextKeyName) {
    this.contextKeyName = contextKeyName;
  }


  public ContextEntry contextKeyValues(@javax.annotation.Nullable List<String> contextKeyValues) {
    this.contextKeyValues = contextKeyValues;
    return this;
  }

  public ContextEntry addContextKeyValuesItem(String contextKeyValuesItem) {
    if (this.contextKeyValues == null) {
      this.contextKeyValues = new ArrayList<>();
    }
    this.contextKeyValues.add(contextKeyValuesItem);
    return this;
  }

  /**
   * The value (or values, if the condition context key supports multiple values) to provide to the simulation when the key is referenced by a &lt;code&gt;Condition&lt;/code&gt; element in an input policy.
   * @return contextKeyValues
   */
  @javax.annotation.Nullable
  public List<String> getContextKeyValues() {
    return contextKeyValues;
  }

  public void setContextKeyValues(@javax.annotation.Nullable List<String> contextKeyValues) {
    this.contextKeyValues = contextKeyValues;
  }


  public ContextEntry contextKeyType(@javax.annotation.Nullable ContextKeyTypeEnum contextKeyType) {
    this.contextKeyType = contextKeyType;
    return this;
  }

  /**
   * The data type of the value (or values) specified in the &lt;code&gt;ContextKeyValues&lt;/code&gt; parameter.
   * @return contextKeyType
   */
  @javax.annotation.Nullable
  public ContextKeyTypeEnum getContextKeyType() {
    return contextKeyType;
  }

  public void setContextKeyType(@javax.annotation.Nullable ContextKeyTypeEnum contextKeyType) {
    this.contextKeyType = contextKeyType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContextEntry contextEntry = (ContextEntry) o;
    return Objects.equals(this.contextKeyName, contextEntry.contextKeyName) &&
        Objects.equals(this.contextKeyValues, contextEntry.contextKeyValues) &&
        Objects.equals(this.contextKeyType, contextEntry.contextKeyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contextKeyName, contextKeyValues, contextKeyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContextEntry {\n");
    sb.append("    contextKeyName: ").append(toIndentedString(contextKeyName)).append("\n");
    sb.append("    contextKeyValues: ").append(toIndentedString(contextKeyValues)).append("\n");
    sb.append("    contextKeyType: ").append(toIndentedString(contextKeyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ContextKeyName", "ContextKeyValues", "ContextKeyType"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContextEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContextEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContextEntry is not found in the empty JSON string", ContextEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContextEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContextEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ContextKeyName") != null && !jsonObj.get("ContextKeyName").isJsonNull()) && !jsonObj.get("ContextKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContextKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContextKeyName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ContextKeyValues") != null && !jsonObj.get("ContextKeyValues").isJsonNull() && !jsonObj.get("ContextKeyValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContextKeyValues` to be an array in the JSON string but got `%s`", jsonObj.get("ContextKeyValues").toString()));
      }
      // validate the optional field `ContextKeyType`
      if (jsonObj.get("ContextKeyType") != null && !jsonObj.get("ContextKeyType").isJsonNull()) {
        ContextKeyTypeEnum.validateJsonElement(jsonObj.get("ContextKeyType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContextEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContextEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContextEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContextEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ContextEntry>() {
           @Override
           public void write(JsonWriter out, ContextEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContextEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContextEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContextEntry
   * @throws IOException if the JSON string is invalid with respect to ContextEntry
   */
  public static ContextEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContextEntry.class);
  }

  /**
   * Convert an instance of ContextEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

