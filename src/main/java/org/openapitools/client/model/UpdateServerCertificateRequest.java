/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateServerCertificateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class UpdateServerCertificateRequest {
  public static final String SERIALIZED_NAME_SERVER_CERTIFICATE_NAME = "ServerCertificateName";
  @SerializedName(SERIALIZED_NAME_SERVER_CERTIFICATE_NAME)
  @javax.annotation.Nonnull
  private String serverCertificateName;

  public static final String SERIALIZED_NAME_NEW_PATH = "NewPath";
  @SerializedName(SERIALIZED_NAME_NEW_PATH)
  @javax.annotation.Nullable
  private String newPath;

  public static final String SERIALIZED_NAME_NEW_SERVER_CERTIFICATE_NAME = "NewServerCertificateName";
  @SerializedName(SERIALIZED_NAME_NEW_SERVER_CERTIFICATE_NAME)
  @javax.annotation.Nullable
  private String newServerCertificateName;

  public UpdateServerCertificateRequest() {
  }

  public UpdateServerCertificateRequest serverCertificateName(@javax.annotation.Nonnull String serverCertificateName) {
    this.serverCertificateName = serverCertificateName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the server certificate that you want to update.&lt;/p&gt; &lt;p&gt;This parameter allows (through its &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt;) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+&#x3D;,.@-&lt;/p&gt;
   * @return serverCertificateName
   */
  @javax.annotation.Nonnull
  public String getServerCertificateName() {
    return serverCertificateName;
  }

  public void setServerCertificateName(@javax.annotation.Nonnull String serverCertificateName) {
    this.serverCertificateName = serverCertificateName;
  }


  public UpdateServerCertificateRequest newPath(@javax.annotation.Nullable String newPath) {
    this.newPath = newPath;
    return this;
  }

  /**
   * &lt;p&gt;The new path for the server certificate. Include this only if you are updating the server certificate&#39;s path.&lt;/p&gt; &lt;p&gt;This parameter allows (through its &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt;) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (&lt;code&gt;\\u0021&lt;/code&gt;) through the DEL character (&lt;code&gt;\\u007F&lt;/code&gt;), including most punctuation characters, digits, and upper and lowercased letters.&lt;/p&gt;
   * @return newPath
   */
  @javax.annotation.Nullable
  public String getNewPath() {
    return newPath;
  }

  public void setNewPath(@javax.annotation.Nullable String newPath) {
    this.newPath = newPath;
  }


  public UpdateServerCertificateRequest newServerCertificateName(@javax.annotation.Nullable String newServerCertificateName) {
    this.newServerCertificateName = newServerCertificateName;
    return this;
  }

  /**
   * &lt;p&gt;The new name for the server certificate. Include this only if you are updating the server certificate&#39;s name. The name of the certificate cannot contain any spaces.&lt;/p&gt; &lt;p&gt;This parameter allows (through its &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt;) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+&#x3D;,.@-&lt;/p&gt;
   * @return newServerCertificateName
   */
  @javax.annotation.Nullable
  public String getNewServerCertificateName() {
    return newServerCertificateName;
  }

  public void setNewServerCertificateName(@javax.annotation.Nullable String newServerCertificateName) {
    this.newServerCertificateName = newServerCertificateName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateServerCertificateRequest updateServerCertificateRequest = (UpdateServerCertificateRequest) o;
    return Objects.equals(this.serverCertificateName, updateServerCertificateRequest.serverCertificateName) &&
        Objects.equals(this.newPath, updateServerCertificateRequest.newPath) &&
        Objects.equals(this.newServerCertificateName, updateServerCertificateRequest.newServerCertificateName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverCertificateName, newPath, newServerCertificateName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateServerCertificateRequest {\n");
    sb.append("    serverCertificateName: ").append(toIndentedString(serverCertificateName)).append("\n");
    sb.append("    newPath: ").append(toIndentedString(newPath)).append("\n");
    sb.append("    newServerCertificateName: ").append(toIndentedString(newServerCertificateName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ServerCertificateName", "NewPath", "NewServerCertificateName"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("ServerCertificateName"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateServerCertificateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateServerCertificateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateServerCertificateRequest is not found in the empty JSON string", UpdateServerCertificateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateServerCertificateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateServerCertificateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateServerCertificateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ServerCertificateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServerCertificateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServerCertificateName").toString()));
      }
      if ((jsonObj.get("NewPath") != null && !jsonObj.get("NewPath").isJsonNull()) && !jsonObj.get("NewPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NewPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NewPath").toString()));
      }
      if ((jsonObj.get("NewServerCertificateName") != null && !jsonObj.get("NewServerCertificateName").isJsonNull()) && !jsonObj.get("NewServerCertificateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NewServerCertificateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NewServerCertificateName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateServerCertificateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateServerCertificateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateServerCertificateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateServerCertificateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateServerCertificateRequest>() {
           @Override
           public void write(JsonWriter out, UpdateServerCertificateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateServerCertificateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateServerCertificateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateServerCertificateRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateServerCertificateRequest
   */
  public static UpdateServerCertificateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateServerCertificateRequest.class);
  }

  /**
   * Convert an instance of UpdateServerCertificateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

