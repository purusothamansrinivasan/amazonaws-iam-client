/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a virtual MFA device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class VirtualMFADevice {
  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  @javax.annotation.Nonnull
  private String serialNumber;

  public static final String SERIALIZED_NAME_BASE32_STRING_SEED = "Base32StringSeed";
  @SerializedName(SERIALIZED_NAME_BASE32_STRING_SEED)
  @javax.annotation.Nullable
  private String base32StringSeed;

  public static final String SERIALIZED_NAME_QR_CODE_P_N_G = "QRCodePNG";
  @SerializedName(SERIALIZED_NAME_QR_CODE_P_N_G)
  @javax.annotation.Nullable
  private String qrCodePNG;

  public static final String SERIALIZED_NAME_USER = "User";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nullable
  private User user;

  public static final String SERIALIZED_NAME_ENABLE_DATE = "EnableDate";
  @SerializedName(SERIALIZED_NAME_ENABLE_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime enableDate;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<Tag> tags;

  public VirtualMFADevice() {
  }

  public VirtualMFADevice serialNumber(@javax.annotation.Nonnull String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * The serial number associated with &lt;code&gt;VirtualMFADevice&lt;/code&gt;.
   * @return serialNumber
   */
  @javax.annotation.Nonnull
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(@javax.annotation.Nonnull String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public VirtualMFADevice base32StringSeed(@javax.annotation.Nullable String base32StringSeed) {
    this.base32StringSeed = base32StringSeed;
    return this;
  }

  /**
   *  The base32 seed defined as specified in &lt;a href&#x3D;\&quot;https://tools.ietf.org/html/rfc3548.txt\&quot;&gt;RFC3548&lt;/a&gt;. The &lt;code&gt;Base32StringSeed&lt;/code&gt; is base32-encoded. 
   * @return base32StringSeed
   */
  @javax.annotation.Nullable
  public String getBase32StringSeed() {
    return base32StringSeed;
  }

  public void setBase32StringSeed(@javax.annotation.Nullable String base32StringSeed) {
    this.base32StringSeed = base32StringSeed;
  }


  public VirtualMFADevice qrCodePNG(@javax.annotation.Nullable String qrCodePNG) {
    this.qrCodePNG = qrCodePNG;
    return this;
  }

  /**
   *  A QR code PNG image that encodes &lt;code&gt;otpauth://totp/$virtualMFADeviceName@$AccountName?secret&#x3D;$Base32String&lt;/code&gt; where &lt;code&gt;$virtualMFADeviceName&lt;/code&gt; is one of the create call arguments. &lt;code&gt;AccountName&lt;/code&gt; is the user name if set (otherwise, the account ID otherwise), and &lt;code&gt;Base32String&lt;/code&gt; is the seed in base32 format. The &lt;code&gt;Base32String&lt;/code&gt; value is base64-encoded. 
   * @return qrCodePNG
   */
  @javax.annotation.Nullable
  public String getQrCodePNG() {
    return qrCodePNG;
  }

  public void setQrCodePNG(@javax.annotation.Nullable String qrCodePNG) {
    this.qrCodePNG = qrCodePNG;
  }


  public VirtualMFADevice user(@javax.annotation.Nullable User user) {
    this.user = user;
    return this;
  }

  /**
   * The IAM user associated with this virtual MFA device.
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nullable User user) {
    this.user = user;
  }


  public VirtualMFADevice enableDate(@javax.annotation.Nullable OffsetDateTime enableDate) {
    this.enableDate = enableDate;
    return this;
  }

  /**
   * The date and time on which the virtual MFA device was enabled.
   * @return enableDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEnableDate() {
    return enableDate;
  }

  public void setEnableDate(@javax.annotation.Nullable OffsetDateTime enableDate) {
    this.enableDate = enableDate;
  }


  public VirtualMFADevice tags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public VirtualMFADevice addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of tags that are attached to the virtual MFA device. For more information about tagging, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html\&quot;&gt;Tagging IAM resources&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMFADevice virtualMFADevice = (VirtualMFADevice) o;
    return Objects.equals(this.serialNumber, virtualMFADevice.serialNumber) &&
        Objects.equals(this.base32StringSeed, virtualMFADevice.base32StringSeed) &&
        Objects.equals(this.qrCodePNG, virtualMFADevice.qrCodePNG) &&
        Objects.equals(this.user, virtualMFADevice.user) &&
        Objects.equals(this.enableDate, virtualMFADevice.enableDate) &&
        Objects.equals(this.tags, virtualMFADevice.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serialNumber, base32StringSeed, qrCodePNG, user, enableDate, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMFADevice {\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    base32StringSeed: ").append("*").append("\n");
    sb.append("    qrCodePNG: ").append("*").append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    enableDate: ").append(toIndentedString(enableDate)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("SerialNumber", "Base32StringSeed", "QRCodePNG", "User", "EnableDate", "Tags"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("SerialNumber"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMFADevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMFADevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMFADevice is not found in the empty JSON string", VirtualMFADevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMFADevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMFADevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualMFADevice.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("SerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SerialNumber").toString()));
      }
      if ((jsonObj.get("Base32StringSeed") != null && !jsonObj.get("Base32StringSeed").isJsonNull()) && !jsonObj.get("Base32StringSeed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Base32StringSeed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Base32StringSeed").toString()));
      }
      if ((jsonObj.get("QRCodePNG") != null && !jsonObj.get("QRCodePNG").isJsonNull()) && !jsonObj.get("QRCodePNG").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `QRCodePNG` to be a primitive type in the JSON string but got `%s`", jsonObj.get("QRCodePNG").toString()));
      }
      // validate the optional field `User`
      if (jsonObj.get("User") != null && !jsonObj.get("User").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("User"));
      }
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("Tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
          }

          // validate the optional field `Tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMFADevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMFADevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMFADevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMFADevice.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMFADevice>() {
           @Override
           public void write(JsonWriter out, VirtualMFADevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMFADevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMFADevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMFADevice
   * @throws IOException if the JSON string is invalid with respect to VirtualMFADevice
   */
  public static VirtualMFADevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMFADevice.class);
  }

  /**
   * Convert an instance of VirtualMFADevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

