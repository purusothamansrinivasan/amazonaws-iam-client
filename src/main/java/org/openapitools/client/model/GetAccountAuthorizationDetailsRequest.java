/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAccountAuthorizationDetailsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GetAccountAuthorizationDetailsRequest {
  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private List<EntityType> filter;

  public static final String SERIALIZED_NAME_MAX_ITEMS = "MaxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  @javax.annotation.Nullable
  private Integer maxItems;

  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  @javax.annotation.Nullable
  private String marker;

  public GetAccountAuthorizationDetailsRequest() {
  }

  public GetAccountAuthorizationDetailsRequest filter(@javax.annotation.Nullable List<EntityType> filter) {
    this.filter = filter;
    return this;
  }

  public GetAccountAuthorizationDetailsRequest addFilterItem(EntityType filterItem) {
    if (this.filter == null) {
      this.filter = new ArrayList<>();
    }
    this.filter.add(filterItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value &lt;code&gt;LocalManagedPolicy&lt;/code&gt; to include customer managed policies.&lt;/p&gt; &lt;p&gt;The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.&lt;/p&gt;
   * @return filter
   */
  @javax.annotation.Nullable
  public List<EntityType> getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable List<EntityType> filter) {
    this.filter = filter;
  }


  public GetAccountAuthorizationDetailsRequest maxItems(@javax.annotation.Nullable Integer maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * &lt;p&gt;Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the &lt;code&gt;IsTruncated&lt;/code&gt; response element is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the &lt;code&gt;IsTruncated&lt;/code&gt; response element returns &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;Marker&lt;/code&gt; contains a value to include in the subsequent call that tells the service where to continue from.&lt;/p&gt;
   * minimum: 1
   * maximum: 1000
   * @return maxItems
   */
  @javax.annotation.Nullable
  public Integer getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(@javax.annotation.Nullable Integer maxItems) {
    this.maxItems = maxItems;
  }


  public GetAccountAuthorizationDetailsRequest marker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the &lt;code&gt;Marker&lt;/code&gt; element in the response that you received to indicate where the next call should start.
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAccountAuthorizationDetailsRequest getAccountAuthorizationDetailsRequest = (GetAccountAuthorizationDetailsRequest) o;
    return Objects.equals(this.filter, getAccountAuthorizationDetailsRequest.filter) &&
        Objects.equals(this.maxItems, getAccountAuthorizationDetailsRequest.maxItems) &&
        Objects.equals(this.marker, getAccountAuthorizationDetailsRequest.marker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, maxItems, marker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAccountAuthorizationDetailsRequest {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Filter", "MaxItems", "Marker"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAccountAuthorizationDetailsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAccountAuthorizationDetailsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAccountAuthorizationDetailsRequest is not found in the empty JSON string", GetAccountAuthorizationDetailsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAccountAuthorizationDetailsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAccountAuthorizationDetailsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull() && !jsonObj.get("Filter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Filter` to be an array in the JSON string but got `%s`", jsonObj.get("Filter").toString()));
      }
      if ((jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) && !jsonObj.get("Marker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Marker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Marker").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAccountAuthorizationDetailsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAccountAuthorizationDetailsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAccountAuthorizationDetailsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAccountAuthorizationDetailsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAccountAuthorizationDetailsRequest>() {
           @Override
           public void write(JsonWriter out, GetAccountAuthorizationDetailsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAccountAuthorizationDetailsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAccountAuthorizationDetailsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAccountAuthorizationDetailsRequest
   * @throws IOException if the JSON string is invalid with respect to GetAccountAuthorizationDetailsRequest
   */
  public static GetAccountAuthorizationDetailsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAccountAuthorizationDetailsRequest.class);
  }

  /**
   * Convert an instance of GetAccountAuthorizationDetailsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

