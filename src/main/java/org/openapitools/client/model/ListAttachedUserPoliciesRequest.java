/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListAttachedUserPoliciesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ListAttachedUserPoliciesRequest {
  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  @javax.annotation.Nonnull
  private String userName;

  public static final String SERIALIZED_NAME_PATH_PREFIX = "PathPrefix";
  @SerializedName(SERIALIZED_NAME_PATH_PREFIX)
  @javax.annotation.Nullable
  private String pathPrefix;

  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  @javax.annotation.Nullable
  private String marker;

  public static final String SERIALIZED_NAME_MAX_ITEMS = "MaxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  @javax.annotation.Nullable
  private Integer maxItems;

  public ListAttachedUserPoliciesRequest() {
  }

  public ListAttachedUserPoliciesRequest userName(@javax.annotation.Nonnull String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * &lt;p&gt;The name (friendly name, not ARN) of the user to list attached policies for.&lt;/p&gt; &lt;p&gt;This parameter allows (through its &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt;) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+&#x3D;,.@-&lt;/p&gt;
   * @return userName
   */
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }

  public void setUserName(@javax.annotation.Nonnull String userName) {
    this.userName = userName;
  }


  public ListAttachedUserPoliciesRequest pathPrefix(@javax.annotation.Nullable String pathPrefix) {
    this.pathPrefix = pathPrefix;
    return this;
  }

  /**
   * &lt;p&gt;The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.&lt;/p&gt; &lt;p&gt;This parameter allows (through its &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt;) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (&lt;code&gt;\\u0021&lt;/code&gt;) through the DEL character (&lt;code&gt;\\u007F&lt;/code&gt;), including most punctuation characters, digits, and upper and lowercased letters.&lt;/p&gt;
   * @return pathPrefix
   */
  @javax.annotation.Nullable
  public String getPathPrefix() {
    return pathPrefix;
  }

  public void setPathPrefix(@javax.annotation.Nullable String pathPrefix) {
    this.pathPrefix = pathPrefix;
  }


  public ListAttachedUserPoliciesRequest marker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the &lt;code&gt;Marker&lt;/code&gt; element in the response that you received to indicate where the next call should start.
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
  }


  public ListAttachedUserPoliciesRequest maxItems(@javax.annotation.Nullable Integer maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * &lt;p&gt;Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the &lt;code&gt;IsTruncated&lt;/code&gt; response element is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the &lt;code&gt;IsTruncated&lt;/code&gt; response element returns &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;Marker&lt;/code&gt; contains a value to include in the subsequent call that tells the service where to continue from.&lt;/p&gt;
   * minimum: 1
   * maximum: 1000
   * @return maxItems
   */
  @javax.annotation.Nullable
  public Integer getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(@javax.annotation.Nullable Integer maxItems) {
    this.maxItems = maxItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAttachedUserPoliciesRequest listAttachedUserPoliciesRequest = (ListAttachedUserPoliciesRequest) o;
    return Objects.equals(this.userName, listAttachedUserPoliciesRequest.userName) &&
        Objects.equals(this.pathPrefix, listAttachedUserPoliciesRequest.pathPrefix) &&
        Objects.equals(this.marker, listAttachedUserPoliciesRequest.marker) &&
        Objects.equals(this.maxItems, listAttachedUserPoliciesRequest.maxItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userName, pathPrefix, marker, maxItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAttachedUserPoliciesRequest {\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    pathPrefix: ").append(toIndentedString(pathPrefix)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("UserName", "PathPrefix", "Marker", "MaxItems"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("UserName"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListAttachedUserPoliciesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListAttachedUserPoliciesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAttachedUserPoliciesRequest is not found in the empty JSON string", ListAttachedUserPoliciesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListAttachedUserPoliciesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAttachedUserPoliciesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListAttachedUserPoliciesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("UserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserName").toString()));
      }
      if ((jsonObj.get("PathPrefix") != null && !jsonObj.get("PathPrefix").isJsonNull()) && !jsonObj.get("PathPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PathPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PathPrefix").toString()));
      }
      if ((jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) && !jsonObj.get("Marker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Marker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Marker").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAttachedUserPoliciesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAttachedUserPoliciesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAttachedUserPoliciesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAttachedUserPoliciesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAttachedUserPoliciesRequest>() {
           @Override
           public void write(JsonWriter out, ListAttachedUserPoliciesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAttachedUserPoliciesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListAttachedUserPoliciesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListAttachedUserPoliciesRequest
   * @throws IOException if the JSON string is invalid with respect to ListAttachedUserPoliciesRequest
   */
  public static ListAttachedUserPoliciesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAttachedUserPoliciesRequest.class);
  }

  /**
   * Convert an instance of ListAttachedUserPoliciesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

