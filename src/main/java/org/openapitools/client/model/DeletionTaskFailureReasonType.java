/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RoleUsageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The reason that the service-linked role deletion failed.&lt;/p&gt; &lt;p&gt;This data type is used as a response element in the &lt;a&gt;GetServiceLinkedRoleDeletionStatus&lt;/a&gt; operation.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class DeletionTaskFailureReasonType {
  public static final String SERIALIZED_NAME_REASON = "Reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  @javax.annotation.Nullable
  private String reason;

  public static final String SERIALIZED_NAME_ROLE_USAGE_LIST = "RoleUsageList";
  @SerializedName(SERIALIZED_NAME_ROLE_USAGE_LIST)
  @javax.annotation.Nullable
  private List<RoleUsageType> roleUsageList;

  public DeletionTaskFailureReasonType() {
  }

  public DeletionTaskFailureReasonType reason(@javax.annotation.Nullable String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * A short description of the reason that the service-linked role deletion failed.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(@javax.annotation.Nullable String reason) {
    this.reason = reason;
  }


  public DeletionTaskFailureReasonType roleUsageList(@javax.annotation.Nullable List<RoleUsageType> roleUsageList) {
    this.roleUsageList = roleUsageList;
    return this;
  }

  public DeletionTaskFailureReasonType addRoleUsageListItem(RoleUsageType roleUsageListItem) {
    if (this.roleUsageList == null) {
      this.roleUsageList = new ArrayList<>();
    }
    this.roleUsageList.add(roleUsageListItem);
    return this;
  }

  /**
   * A list of objects that contains details about the service-linked role deletion failure, if that information is returned by the service. If the service-linked role has active sessions or if any resources that were used by the role have not been deleted from the linked service, the role can&#39;t be deleted. This parameter includes a list of the resources that are associated with the role and the Region in which the resources are being used.
   * @return roleUsageList
   */
  @javax.annotation.Nullable
  public List<RoleUsageType> getRoleUsageList() {
    return roleUsageList;
  }

  public void setRoleUsageList(@javax.annotation.Nullable List<RoleUsageType> roleUsageList) {
    this.roleUsageList = roleUsageList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeletionTaskFailureReasonType deletionTaskFailureReasonType = (DeletionTaskFailureReasonType) o;
    return Objects.equals(this.reason, deletionTaskFailureReasonType.reason) &&
        Objects.equals(this.roleUsageList, deletionTaskFailureReasonType.roleUsageList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reason, roleUsageList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeletionTaskFailureReasonType {\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    roleUsageList: ").append(toIndentedString(roleUsageList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Reason", "RoleUsageList"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeletionTaskFailureReasonType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeletionTaskFailureReasonType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeletionTaskFailureReasonType is not found in the empty JSON string", DeletionTaskFailureReasonType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeletionTaskFailureReasonType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeletionTaskFailureReasonType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Reason") != null && !jsonObj.get("Reason").isJsonNull()) && !jsonObj.get("Reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Reason").toString()));
      }
      if (jsonObj.get("RoleUsageList") != null && !jsonObj.get("RoleUsageList").isJsonNull()) {
        JsonArray jsonArrayroleUsageList = jsonObj.getAsJsonArray("RoleUsageList");
        if (jsonArrayroleUsageList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RoleUsageList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RoleUsageList` to be an array in the JSON string but got `%s`", jsonObj.get("RoleUsageList").toString()));
          }

          // validate the optional field `RoleUsageList` (array)
          for (int i = 0; i < jsonArrayroleUsageList.size(); i++) {
            RoleUsageType.validateJsonElement(jsonArrayroleUsageList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeletionTaskFailureReasonType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeletionTaskFailureReasonType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeletionTaskFailureReasonType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeletionTaskFailureReasonType.class));

       return (TypeAdapter<T>) new TypeAdapter<DeletionTaskFailureReasonType>() {
           @Override
           public void write(JsonWriter out, DeletionTaskFailureReasonType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeletionTaskFailureReasonType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeletionTaskFailureReasonType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeletionTaskFailureReasonType
   * @throws IOException if the JSON string is invalid with respect to DeletionTaskFailureReasonType
   */
  public static DeletionTaskFailureReasonType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeletionTaskFailureReasonType.class);
  }

  /**
   * Convert an instance of DeletionTaskFailureReasonType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

