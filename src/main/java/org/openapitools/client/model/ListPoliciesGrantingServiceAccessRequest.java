/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListPoliciesGrantingServiceAccessRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ListPoliciesGrantingServiceAccessRequest {
  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  @javax.annotation.Nullable
  private String marker;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  @javax.annotation.Nonnull
  private String arn;

  public static final String SERIALIZED_NAME_SERVICE_NAMESPACES = "ServiceNamespaces";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAMESPACES)
  @javax.annotation.Nonnull
  private List<String> serviceNamespaces;

  public ListPoliciesGrantingServiceAccessRequest() {
  }

  public ListPoliciesGrantingServiceAccessRequest marker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the &lt;code&gt;Marker&lt;/code&gt; element in the response that you received to indicate where the next call should start.
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(@javax.annotation.Nullable String marker) {
    this.marker = marker;
  }


  public ListPoliciesGrantingServiceAccessRequest arn(@javax.annotation.Nonnull String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * The ARN of the IAM identity (user, group, or role) whose policies you want to list.
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(@javax.annotation.Nonnull String arn) {
    this.arn = arn;
  }


  public ListPoliciesGrantingServiceAccessRequest serviceNamespaces(@javax.annotation.Nonnull List<String> serviceNamespaces) {
    this.serviceNamespaces = serviceNamespaces;
    return this;
  }

  public ListPoliciesGrantingServiceAccessRequest addServiceNamespacesItem(String serviceNamespacesItem) {
    if (this.serviceNamespaces == null) {
      this.serviceNamespaces = new ArrayList<>();
    }
    this.serviceNamespaces.add(serviceNamespacesItem);
    return this;
  }

  /**
   * &lt;p&gt;The service namespace for the Amazon Web Services services whose policies you want to list.&lt;/p&gt; &lt;p&gt;To learn the service namespace for a service, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html\&quot;&gt;Actions, resources, and condition keys for Amazon Web Services services&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, &lt;code&gt;(service prefix: a4b)&lt;/code&gt;. For more information about service namespaces, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces\&quot;&gt;Amazon Web Services service namespaces&lt;/a&gt; in theÂ &lt;i&gt;Amazon Web Services General Reference&lt;/i&gt;.&lt;/p&gt;
   * @return serviceNamespaces
   */
  @javax.annotation.Nonnull
  public List<String> getServiceNamespaces() {
    return serviceNamespaces;
  }

  public void setServiceNamespaces(@javax.annotation.Nonnull List<String> serviceNamespaces) {
    this.serviceNamespaces = serviceNamespaces;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPoliciesGrantingServiceAccessRequest listPoliciesGrantingServiceAccessRequest = (ListPoliciesGrantingServiceAccessRequest) o;
    return Objects.equals(this.marker, listPoliciesGrantingServiceAccessRequest.marker) &&
        Objects.equals(this.arn, listPoliciesGrantingServiceAccessRequest.arn) &&
        Objects.equals(this.serviceNamespaces, listPoliciesGrantingServiceAccessRequest.serviceNamespaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(marker, arn, serviceNamespaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPoliciesGrantingServiceAccessRequest {\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    serviceNamespaces: ").append(toIndentedString(serviceNamespaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Marker", "Arn", "ServiceNamespaces"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("Arn", "ServiceNamespaces"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPoliciesGrantingServiceAccessRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPoliciesGrantingServiceAccessRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPoliciesGrantingServiceAccessRequest is not found in the empty JSON string", ListPoliciesGrantingServiceAccessRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPoliciesGrantingServiceAccessRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPoliciesGrantingServiceAccessRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListPoliciesGrantingServiceAccessRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) && !jsonObj.get("Marker").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Marker` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Marker").toString()));
      }
      if (!jsonObj.get("Arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Arn").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ServiceNamespaces") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ServiceNamespaces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceNamespaces` to be an array in the JSON string but got `%s`", jsonObj.get("ServiceNamespaces").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPoliciesGrantingServiceAccessRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPoliciesGrantingServiceAccessRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPoliciesGrantingServiceAccessRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPoliciesGrantingServiceAccessRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPoliciesGrantingServiceAccessRequest>() {
           @Override
           public void write(JsonWriter out, ListPoliciesGrantingServiceAccessRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPoliciesGrantingServiceAccessRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPoliciesGrantingServiceAccessRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPoliciesGrantingServiceAccessRequest
   * @throws IOException if the JSON string is invalid with respect to ListPoliciesGrantingServiceAccessRequest
   */
  public static ListPoliciesGrantingServiceAccessRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPoliciesGrantingServiceAccessRequest.class);
  }

  /**
   * Convert an instance of ListPoliciesGrantingServiceAccessRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

