/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateServiceLinkedRoleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class CreateServiceLinkedRoleRequest {
  public static final String SERIALIZED_NAME_AW_S_SERVICE_NAME = "AWSServiceName";
  @SerializedName(SERIALIZED_NAME_AW_S_SERVICE_NAME)
  @javax.annotation.Nonnull
  private String awSServiceName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_CUSTOM_SUFFIX = "CustomSuffix";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SUFFIX)
  @javax.annotation.Nullable
  private String customSuffix;

  public CreateServiceLinkedRoleRequest() {
  }

  public CreateServiceLinkedRoleRequest awSServiceName(@javax.annotation.Nonnull String awSServiceName) {
    this.awSServiceName = awSServiceName;
    return this;
  }

  /**
   * &lt;p&gt;The service principal for the Amazon Web Services service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: &lt;code&gt;elasticbeanstalk.amazonaws.com&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html\&quot;&gt;Amazon Web Services services that work with IAM&lt;/a&gt; in the &lt;i&gt;IAM User Guide&lt;/i&gt;. Look for the services that have &lt;b&gt;Yes &lt;/b&gt;in the &lt;b&gt;Service-Linked Role&lt;/b&gt; column. Choose the &lt;b&gt;Yes&lt;/b&gt; link to view the service-linked role documentation for that service.&lt;/p&gt;
   * @return awSServiceName
   */
  @javax.annotation.Nonnull
  public String getAwSServiceName() {
    return awSServiceName;
  }

  public void setAwSServiceName(@javax.annotation.Nonnull String awSServiceName) {
    this.awSServiceName = awSServiceName;
  }


  public CreateServiceLinkedRoleRequest description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the role.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateServiceLinkedRoleRequest customSuffix(@javax.annotation.Nullable String customSuffix) {
    this.customSuffix = customSuffix;
    return this;
  }

  /**
   * &lt;p/&gt; &lt;p&gt;A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different &lt;code&gt;CustomSuffix&lt;/code&gt; for each request. Otherwise the request fails with a duplicate role name error. For example, you could add &lt;code&gt;-1&lt;/code&gt; or &lt;code&gt;-debug&lt;/code&gt; to the suffix.&lt;/p&gt; &lt;p&gt;Some services do not support the &lt;code&gt;CustomSuffix&lt;/code&gt; parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.&lt;/p&gt;
   * @return customSuffix
   */
  @javax.annotation.Nullable
  public String getCustomSuffix() {
    return customSuffix;
  }

  public void setCustomSuffix(@javax.annotation.Nullable String customSuffix) {
    this.customSuffix = customSuffix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateServiceLinkedRoleRequest createServiceLinkedRoleRequest = (CreateServiceLinkedRoleRequest) o;
    return Objects.equals(this.awSServiceName, createServiceLinkedRoleRequest.awSServiceName) &&
        Objects.equals(this.description, createServiceLinkedRoleRequest.description) &&
        Objects.equals(this.customSuffix, createServiceLinkedRoleRequest.customSuffix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awSServiceName, description, customSuffix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateServiceLinkedRoleRequest {\n");
    sb.append("    awSServiceName: ").append(toIndentedString(awSServiceName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    customSuffix: ").append(toIndentedString(customSuffix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("AWSServiceName", "Description", "CustomSuffix"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("AWSServiceName"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateServiceLinkedRoleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateServiceLinkedRoleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateServiceLinkedRoleRequest is not found in the empty JSON string", CreateServiceLinkedRoleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateServiceLinkedRoleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateServiceLinkedRoleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateServiceLinkedRoleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AWSServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AWSServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AWSServiceName").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("CustomSuffix") != null && !jsonObj.get("CustomSuffix").isJsonNull()) && !jsonObj.get("CustomSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomSuffix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateServiceLinkedRoleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateServiceLinkedRoleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateServiceLinkedRoleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateServiceLinkedRoleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateServiceLinkedRoleRequest>() {
           @Override
           public void write(JsonWriter out, CreateServiceLinkedRoleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateServiceLinkedRoleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateServiceLinkedRoleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateServiceLinkedRoleRequest
   * @throws IOException if the JSON string is invalid with respect to CreateServiceLinkedRoleRequest
   */
  public static CreateServiceLinkedRoleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateServiceLinkedRoleRequest.class);
  }

  /**
   * Convert an instance of CreateServiceLinkedRoleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

