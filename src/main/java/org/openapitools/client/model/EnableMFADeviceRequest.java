/*
 * AWS Identity and Access Management
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnableMFADeviceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T14:26:34.090256+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class EnableMFADeviceRequest {
  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  @javax.annotation.Nonnull
  private String userName;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  @javax.annotation.Nonnull
  private String serialNumber;

  public static final String SERIALIZED_NAME_AUTHENTICATION_CODE1 = "AuthenticationCode1";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CODE1)
  @javax.annotation.Nonnull
  private String authenticationCode1;

  public static final String SERIALIZED_NAME_AUTHENTICATION_CODE2 = "AuthenticationCode2";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CODE2)
  @javax.annotation.Nonnull
  private String authenticationCode2;

  public EnableMFADeviceRequest() {
  }

  public EnableMFADeviceRequest userName(@javax.annotation.Nonnull String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the IAM user for whom you want to enable the MFA device.&lt;/p&gt; &lt;p&gt;This parameter allows (through its &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt;) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+&#x3D;,.@-&lt;/p&gt;
   * @return userName
   */
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }

  public void setUserName(@javax.annotation.Nonnull String userName) {
    this.userName = userName;
  }


  public EnableMFADeviceRequest serialNumber(@javax.annotation.Nonnull String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * &lt;p&gt;The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.&lt;/p&gt; &lt;p&gt;This parameter allows (through its &lt;a href&#x3D;\&quot;http://wikipedia.org/wiki/regex\&quot;&gt;regex pattern&lt;/a&gt;) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: &#x3D;,.@:/-&lt;/p&gt;
   * @return serialNumber
   */
  @javax.annotation.Nonnull
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(@javax.annotation.Nonnull String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public EnableMFADeviceRequest authenticationCode1(@javax.annotation.Nonnull String authenticationCode1) {
    this.authenticationCode1 = authenticationCode1;
    return this;
  }

  /**
   * &lt;p&gt;An authentication code emitted by the device. &lt;/p&gt; &lt;p&gt;The format for this parameter is a string of six digits.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html\&quot;&gt;resync the device&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
   * @return authenticationCode1
   */
  @javax.annotation.Nonnull
  public String getAuthenticationCode1() {
    return authenticationCode1;
  }

  public void setAuthenticationCode1(@javax.annotation.Nonnull String authenticationCode1) {
    this.authenticationCode1 = authenticationCode1;
  }


  public EnableMFADeviceRequest authenticationCode2(@javax.annotation.Nonnull String authenticationCode2) {
    this.authenticationCode2 = authenticationCode2;
    return this;
  }

  /**
   * &lt;p&gt;A subsequent authentication code emitted by the device.&lt;/p&gt; &lt;p&gt;The format for this parameter is a string of six digits.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html\&quot;&gt;resync the device&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
   * @return authenticationCode2
   */
  @javax.annotation.Nonnull
  public String getAuthenticationCode2() {
    return authenticationCode2;
  }

  public void setAuthenticationCode2(@javax.annotation.Nonnull String authenticationCode2) {
    this.authenticationCode2 = authenticationCode2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnableMFADeviceRequest enableMFADeviceRequest = (EnableMFADeviceRequest) o;
    return Objects.equals(this.userName, enableMFADeviceRequest.userName) &&
        Objects.equals(this.serialNumber, enableMFADeviceRequest.serialNumber) &&
        Objects.equals(this.authenticationCode1, enableMFADeviceRequest.authenticationCode1) &&
        Objects.equals(this.authenticationCode2, enableMFADeviceRequest.authenticationCode2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userName, serialNumber, authenticationCode1, authenticationCode2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnableMFADeviceRequest {\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    authenticationCode1: ").append(toIndentedString(authenticationCode1)).append("\n");
    sb.append("    authenticationCode2: ").append(toIndentedString(authenticationCode2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("UserName", "SerialNumber", "AuthenticationCode1", "AuthenticationCode2"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("UserName", "SerialNumber", "AuthenticationCode1", "AuthenticationCode2"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnableMFADeviceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnableMFADeviceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnableMFADeviceRequest is not found in the empty JSON string", EnableMFADeviceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnableMFADeviceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnableMFADeviceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnableMFADeviceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("UserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserName").toString()));
      }
      if (!jsonObj.get("SerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SerialNumber").toString()));
      }
      if (!jsonObj.get("AuthenticationCode1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuthenticationCode1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AuthenticationCode1").toString()));
      }
      if (!jsonObj.get("AuthenticationCode2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuthenticationCode2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AuthenticationCode2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnableMFADeviceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnableMFADeviceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnableMFADeviceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnableMFADeviceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EnableMFADeviceRequest>() {
           @Override
           public void write(JsonWriter out, EnableMFADeviceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnableMFADeviceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnableMFADeviceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnableMFADeviceRequest
   * @throws IOException if the JSON string is invalid with respect to EnableMFADeviceRequest
   */
  public static EnableMFADeviceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnableMFADeviceRequest.class);
  }

  /**
   * Convert an instance of EnableMFADeviceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

